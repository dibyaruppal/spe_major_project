'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * Gives a XX.XX format in Bytes KB, MB, GB or TB
 * @param fileSize file size to give format in Bytes
 */
var fileSizeFormater = function (fileSize) {
    var result = "";
    if (!fileSize) {
        return undefined;
    }
    if (fileSize < 1024) {
        result = fileSize + " Bytes";
    }
    else {
        //KB
        if (fileSize < 1024 * 1024) {
            result = (fileSize / 1024).toFixed(2) + " KB";
        }
        else if (fileSize < 1024 * 1024 * 1024) {
            result = ((fileSize / 1024) / 1024).toFixed(2) + " MB";
        }
        else if (fileSize < 1024 * 1024 * 1024 * 1024) {
            result = (((fileSize / 1024) / 1024) / 1024).toFixed(2) + " GB";
        }
        else {
            result = ((((fileSize / 1024) / 1024) / 1024) / 1024).toFixed(2) + " TB";
        }
    }
    return result;
};

/**
 * Italian translation for Dropzone component
 */
var DropzoneItalian = {
    defaultLabel: "Trascina qui i tuoi file",
    uploadingMessage: function (amountOfFiles) { return "Caricamento di ".concat(amountOfFiles, " file"); },
    uploadFinished: function (uploaded, rejected) { return "File caricati: ".concat(uploaded, ", File rifiutati: ").concat(rejected); },
    noFilesMessage: "Nessun file valido in attesa di essere caricato",
    footer: {
        acceptAll: "Tutti i tipi di file sono accettati",
        acceptCustom: function (accept) { return "Tipi di file consentiti: ".concat(accept); }
    },
    header: {
        uploadFilesMessage: "Caricamento",
        maxSizeMessage: function (maxFileSize) { return "Dimensione massima ".concat(maxFileSize); },
        validFilesMessage: function (numberOfValidFiles, maxFiles) { return "File  ".concat(numberOfValidFiles, "/").concat(maxFiles); }
    },
    fakeuploadsuccess: "Il file è stato caricato con successo ",
    fakeUploadError: "Errore di caricamento del file",
};
/**
 * Italian translation for FileItem component
 */
var FileItemItalian = {
    fullInfoLayer: {
        name: "Nome: ",
        size: "Dimensione: ",
        type: "Tipo: "
    },
    status: {
        preparing: "preparazione",
        uploading: "In corso",
        success: "Successo",
        valid: "Valido",
        denied: "Non válido",
        error: "Errore",
        aborted: "Interrotto"
    },
};
/**
 * Italian translation for Validation Errors
 */
var ValidateErrorItalian = {
    maxSizeError: function (maxSize) { return "Il file \u00E8 molto grande. Il tam. il massimo \u00E8 ".concat(fileSizeFormater(maxSize)); },
    acceptError: "Tipo di file illegale",
    maxFileCount: function (maxFiles) { return "Numero massimo di file (".concat(maxFiles, ") raggiunto"); }
};

/**
 * French translation for Dropzone component
 */
var DropzoneFrench = {
    defaultLabel: "Déposez vos fichiers ici",
    uploadingMessage: function (amountOfFiles) { return "Envoi de ".concat(amountOfFiles, " fichiers"); },
    uploadFinished: function (uploaded, rejected) { return "Fichiers t\u00E9l\u00E9charg\u00E9s : ".concat(uploaded, ", Fichiers rejet\u00E9s: ").concat(rejected); },
    noFilesMessage: "Aucun fichier valide ne manque",
    footer: {
        acceptAll: "Tous types de fichiers accept\u00E9s ",
        acceptCustom: function (accept) { return "Types de fichier: ".concat(accept); }
    },
    header: {
        uploadFilesMessage: "Envoyer",
        maxSizeMessage: function (maxFileSize) { return "Taille maximale ".concat(maxFileSize); },
        validFilesMessage: function (numberOfValidFiles, maxFiles) { return "Fichiers  ".concat(numberOfValidFiles, "/").concat(maxFiles); }
    },
    fakeuploadsuccess: "Le fichier a été téléchargé avec succès",
    fakeUploadError: "Erreur lors du téléchargement ",
};
/**
 * French translation for FileItem component
 */
var FileItemFrench = {
    fullInfoLayer: {
        name: "Le nom: ",
        size: "Le taille: ",
        type: "Le type: "
    },
    status: {
        preparing: "préparer",
        uploading: "En cours",
        success: "Succès",
        valid: "Valide",
        denied: "Refusé",
        error: "Erreur",
        aborted: "Interrompu"
    },
};
/**
 * French translation for Validation Errors
 */
var ValidateErrorFrench = {
    maxSizeError: function (maxSize) { return "Le fichier est tr\u00E8s volumineux. Le tam. le maximum est de ".concat(fileSizeFormater(maxSize)); },
    acceptError: "Type de fichier ill\u00E9gal ",
    maxFileCount: function (maxFiles) { return "Limite de fichiers atteinte (".concat(maxFiles, ")"); }
};

/**
 * English translation for Dropzone component
 */
var DropzoneEnglish = {
    defaultLabel: "Drop your files here",
    uploadingMessage: function (amountOfFiles) { return "Uploading ".concat(amountOfFiles, " files"); },
    uploadFinished: function (uploaded, rejected) { return "Uploaded files: ".concat(uploaded, ", Rejected files: ").concat(rejected); },
    noFilesMessage: "There is no missing valid file to upload",
    footer: {
        acceptAll: "All file types accepted",
        acceptCustom: function (accept) { return "Allowed types: ".concat(accept); }
    },
    header: {
        uploadFilesMessage: "Upload files",
        maxSizeMessage: function (maxFileSize) { return "Max file size: ".concat(maxFileSize); },
        validFilesMessage: function (numberOfValidFiles, maxFiles) { return "Files ".concat(numberOfValidFiles, "/").concat(maxFiles); }
    },
    fakeuploadsuccess: "File was successfuly uploaded",
    fakeUploadError: "Error on uploading. Please try again later.",
};
/**
 * English translation for FileItem component
 */
var FileItemEnglish = {
    fullInfoLayer: {
        name: "Name: ",
        size: "Size: ",
        type: "Type: "
    },
    status: {
        preparing: "Preparing",
        uploading: "Uploading",
        success: "Success",
        valid: "Valid",
        denied: "Not valid",
        error: "Error",
        aborted: "Aborted"
    },
};
/**
 * English translation for Validation Errors
 */
var ValidateErrorEnglish = {
    maxSizeError: function (maxSize) {
        return "File is too big. Max file size allowed is ".concat(fileSizeFormater(maxSize));
    },
    acceptError: "File type is not allowed",
    maxFileCount: function (maxFiles) {
        return "Max amount of files (".concat(maxFiles, ") has been reached");
    }
};

/**
 * Spanish translation for Dropzone component
 */
var DropzoneSpanish = {
    defaultLabel: "Suelta tus archivos aquí",
    uploadingMessage: function (amountOfFiles) { return "Subiendo ".concat(amountOfFiles, " archivos"); },
    uploadFinished: function (uploaded, rejected) { return "Archivos subidos: ".concat(uploaded, ", Archivos rechazados: ").concat(rejected); },
    noFilesMessage: "No hay archivos v\u00E1lidos pendientes por subir",
    footer: {
        acceptAll: "Todos los tipos de archivo aceptados",
        acceptCustom: function (accept) { return "Tipo(s) de archivo permitidos: ".concat(accept); }
    },
    header: {
        uploadFilesMessage: "Subir",
        maxSizeMessage: function (maxFileSize) { return "Tam. m\u00E1ximo ".concat(maxFileSize); },
        validFilesMessage: function (numberOfValidFiles, maxFiles) { return "Archivos ".concat(numberOfValidFiles, "/").concat(maxFiles); }
    },
    fakeuploadsuccess: "El archivo se subió correctamente",
    fakeUploadError: "Error al subir el archivo",
};
/**
 * Spanish translation for FileItem component
 */
var FileItemSpanish = {
    fullInfoLayer: {
        name: "Nombre: ",
        size: "Tamaño: ",
        type: "Tipo: "
    },
    status: {
        preparing: "Preparando",
        uploading: "Subiendo",
        success: "Éxito",
        valid: "Válido",
        denied: "No válido",
        error: "Error",
        aborted: "Anulado"
    },
};
/**
 * Spanish translation for Validation Errors
 */
var ValidateErrorSpanish = {
    maxSizeError: function (maxSize) { return "El archivo es muy grande. El tam. m\u00E1ximo es ".concat(fileSizeFormater(maxSize)); },
    acceptError: "Tipo de archivo no permitido",
    maxFileCount: function (maxFiles) { return "Cantidad m\u00E1xima de archivos (".concat(maxFiles, ") alcanzada"); }
};

/**
 * Russian translation for Dropzone component
 */
var DropzoneRussian = {
    defaultLabel: "Перетащите сюда свои файлы.",
    uploadingMessage: function (amountOfFiles) { return "\u0412\u044B\u0433\u0440\u0443\u0437\u043A\u0430 ".concat(amountOfFiles, " \u0444\u0430\u0439\u043B\u043E\u0432"); },
    uploadFinished: function (uploaded, rejected) { return "\u0417\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u043E \u0444\u0430\u0439\u043B\u043E\u0432: ".concat(uploaded, ", \u043E\u0442\u043A\u043B\u043E\u043D\u0435\u043D\u043D\u044B\u0445 \u0444\u0430\u0439\u043B\u043E\u0432: ").concat(rejected); },
    noFilesMessage: "\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0439 \u0444\u0430\u0439\u043B \u043D\u0435 \u043E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u043B\u044F \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0438",
    footer: {
        acceptAll: "\u041F\u0440\u0438\u043D\u0438\u043C\u0430\u044E\u0442\u0441\u044F \u0432\u0441\u0435 \u0442\u0438\u043F\u044B \u0444\u0430\u0439\u043B\u043E\u0432 ",
        acceptCustom: function (accept) { return "\u0414\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0435 \u0442\u0438\u043F\u044B: ".concat(accept); }
    },
    header: {
        uploadFilesMessage: "Отправить",
        maxSizeMessage: function (maxFileSize) { return "\u043C\u0430\u043A\u0441 \u0440\u0430\u0437\u043C\u0435\u0440: ".concat(maxFileSize); },
        validFilesMessage: function (numberOfValidFiles, maxFiles) { return "\u0424\u0430\u0439\u043B\u044B ".concat(numberOfValidFiles, "/").concat(maxFiles); }
    },
    fakeuploadsuccess: "Файл был успешно загружен",
    fakeUploadError: "Ошибка при загрузке",
};
/**
 * Russian translation for FileItem component
 *
 */
var FileItemRussian = {
    fullInfoLayer: {
        name: "\u0418\u043C\u044F: ",
        size: "Размер: ",
        type: "Tип: "
    },
    status: {
        preparing: "подготовка",
        uploading: "Загрузка",
        success: "успех",
        valid: "годный",
        denied: "выкинутый",
        error: "ошибка",
        aborted: "прерванный"
    },
};
/**
 * Russian translation for Validation Errors
 */
var ValidateErrorRussian = {
    maxSizeError: function (maxSize) {
        return "\u0424\u0430\u0439\u043B \u0441\u043B\u0438\u0448\u043A\u043E\u043C \u0431\u043E\u043B\u044C\u0448\u043E\u0439. \u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E \u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0439 \u0440\u0430\u0437\u043C\u0435\u0440 \u0444\u0430\u0439\u043B\u0430 - ".concat(fileSizeFormater(maxSize));
    },
    acceptError: "\u0422\u0438\u043F \u0444\u0430\u0439\u043B\u0430 \u043D\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043D",
    maxFileCount: function (maxFiles) {
        return "\u0414\u043E\u0441\u0442\u0438\u0433\u043D\u0443\u0442\u043E \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0444\u0430\u0439\u043B\u043E\u0432 (".concat(maxFiles, ")");
    }
};

/**
 * Portuguese translation for Dropzone
 */
var DropzonePortuguese = {
    defaultLabel: "Solte seus arquivos aqui ",
    uploadingMessage: function (amountOfFiles) { return "Enviando ".concat(amountOfFiles, " arquivos"); },
    uploadFinished: function (uploaded, rejected) { return "Arquivos enviados: ".concat(uploaded, ", Arquivos rejeitados: ").concat(rejected); },
    noFilesMessage: "Nenhum arquivo v\u00E1lido est\u00E1 faltando para enviar",
    footer: {
        acceptAll: "Todos os tipos de arquivo s\u00E3o aceitos",
        acceptCustom: function (accept) { return "Tipos permitidos: ".concat(accept); }
    },
    header: {
        uploadFilesMessage: "Enviar",
        maxSizeMessage: function (maxFileSize) { return "Tamanho m\u00E1ximo: ".concat(maxFileSize); },
        validFilesMessage: function (numberOfValidFiles, maxFiles) { return "Arquivos ".concat(numberOfValidFiles, "/").concat(maxFiles); }
    },
    fakeuploadsuccess: "O arquivo foi enviado com sucesso",
    fakeUploadError: "Erro ao enviar",
};
/**
 * Portuguese translation for FileItem component
 */
var FileItemPortuguese = {
    fullInfoLayer: {
        name: "Nome: ",
        size: "Tamanho: ",
        type: "Tipo: "
    },
    status: {
        preparing: "Preparando",
        uploading: "Enviando",
        success: "Êxito",
        valid: "válido",
        denied: "Negado",
        error: "Erro",
        aborted: "Abortado"
    },
};
/**
 * Portuguese translation for Validation Errors
 */
var ValidateErrorPortuguese = {
    maxSizeError: function (maxSize) { return "O arquivo \u00E9 muito grande. O tamanho m\u00E1ximo de arquivo permitido \u00E9 ".concat(fileSizeFormater(maxSize)); },
    acceptError: "O tipo de arquivo n\u00E3o \u00E9 permitido ",
    maxFileCount: function (maxFiles) { return "Quantidade m\u00E1xima de arquivos (".concat(maxFiles, ") alcan\u00E7ada"); }
};

/**
 * English translation for Dropzone component
 */
var DropzoneSimplifiedChinese = {
    defaultLabel: "将您的文件放在这里",
    uploadingMessage: function (amountOfFiles) { return "\u4E0A\u4F20 ".concat(amountOfFiles, " \u4E2A\u6587\u4EF6"); },
    uploadFinished: function (uploaded, rejected) { return "\u4E0A\u4F20\u6587\u4EF6\uFF1A".concat(uploaded, "\uFF0C\u62D2\u7EDD\u6587\u4EF6\uFF1A").concat(rejected); },
    noFilesMessage: "\u6CA1\u6709\u7F3A\u5C11\u8981\u52A0\u8F7D\u7684\u6709\u6548\u6587\u4EF6",
    footer: {
        acceptAll: "\u63A5\u53D7\u6240\u6709\u6587\u4EF6\u7C7B\u578B",
        acceptCustom: function (accept) { return "\u5141\u8BB8\u7684\u7C7B\u578B: ".concat(accept); }
    },
    header: {
        uploadFilesMessage: "上传文件",
        maxSizeMessage: function (maxFileSize) { return "\u6700\u5927\u6587\u4EF6\u5927\u5C0F\uFF1A".concat(maxFileSize); },
        validFilesMessage: function (numberOfValidFiles, maxFiles) { return "\u6587\u6863 ".concat(numberOfValidFiles, "/").concat(maxFiles); }
    },
    fakeuploadsuccess: "文件已成功上传",
    fakeUploadError: "上传时出错",
};
/**
 * Chinnese translation for FileItem component
 */
var FileItemSimplifiedChinese = {
    fullInfoLayer: {
        name: "\u6587\u6863\u540D\u79F0: ",
        size: "尺寸: ",
        type: "文件类型: "
    },
    status: {
        preparing: "预加载",
        uploading: "上传",
        success: "成功",
        valid: "接受的文件",
        denied: "被拒绝的文件",
        error: "错误",
        aborted: "中止"
    },
};
/**
 * English translation for Validation Errors
 */
var ValidateErrorSimplifiedChinese = {
    maxSizeError: function (maxSize) {
        return "\u6587\u4EF6\u592A\u5927\u3002 \u5141\u8BB8\u7684\u6700\u5927\u6587\u4EF6\u5927\u5C0F\u4E3A ".concat(fileSizeFormater(maxSize));
    },
    acceptError: "\u6587\u4EF6\u7C7B\u578B\u4E0D\u5141\u8BB8",
    maxFileCount: function (maxFiles) {
        return "\u5DF2\u8FBE\u5230\u6700\u5927\u6587\u4EF6\u6570 (".concat(maxFiles, ")");
    }
};

/**
 * English translation for Dropzone component
 */
var DropzoneTraditionalChinese = {
    defaultLabel: "把你的文件放在這裡 ",
    uploadingMessage: function (amountOfFiles) { return "\u4E0A\u50B3".concat(amountOfFiles, "\u500B\u6587\u4EF6"); },
    uploadFinished: function (uploaded, rejected) { return "\u4E0A\u50B3\u6587\u4EF6: ".concat(uploaded, ", \u62D2\u7D55\u7684\u6587\u4EF6\uFF1A").concat(rejected); },
    noFilesMessage: "\u6C92\u6709\u7F3A\u5C11\u8981\u4E0A\u50B3\u7684\u6709\u6548\u6587\u4EF6",
    footer: {
        acceptAll: "\u63A5\u53D7\u6240\u6709\u6587\u4EF6\u985E\u578B",
        acceptCustom: function (accept) { return "\u5141\u8A31\u7684\u985E\u578B\uFF1A".concat(accept); }
    },
    header: {
        uploadFilesMessage: "上傳文件",
        maxSizeMessage: function (maxFileSize) { return "\u6700\u5927\u6587\u4EF6\u5927\u5C0F\uFF1A".concat(maxFileSize); },
        validFilesMessage: function (numberOfValidFiles, maxFiles) { return " \u6587\u4EF6 ".concat(numberOfValidFiles, "/").concat(maxFiles); }
    },
    fakeuploadsuccess: "文件已成功上傳",
    fakeUploadError: "上傳時出錯",
};
/**
 * Chinese translation for FileItem component
 */
var FileItemTraditionalChinese = {
    fullInfoLayer: {
        name: "\u6587\u6A94\u540D\u7A31: ",
        size: "文件大小: ",
        type: "文件類型: "
    },
    status: {
        preparing: "預加載",
        uploading: "上傳",
        success: "成功",
        valid: "有效文件",
        denied: "無效文件",
        error: "錯誤",
        aborted: "中止"
    },
};
/**
 * English translation for Validation Errors
 */
var ValidateErrorTraditionalChinese = {
    maxSizeError: function (maxSize) {
        return "\u6587\u4EF6\u592A\u5927\u3002 \u5141\u8A31\u7684\u6700\u5927\u6587\u4EF6\u5927\u5C0F\u70BA ".concat(fileSizeFormater(maxSize));
    },
    acceptError: "\u6587\u4EF6\u985E\u578B\u4E0D\u5141\u8A31",
    maxFileCount: function (maxFiles) {
        return "\u5DF2\u9054\u5230\u6700\u5927\u6587\u4EF6\u6578 (".concat(maxFiles, ")");
    }
};

var FileItemLocalizer = {
    "ES-es": FileItemSpanish,
    "EN-en": FileItemEnglish,
    "FR-fr": FileItemFrench,
    "IT-it": FileItemItalian,
    "PT-pt": FileItemPortuguese,
    "RU-ru": FileItemRussian,
    "ZH-cn": FileItemSimplifiedChinese,
    "ZH-hk": FileItemTraditionalChinese
};
/**
 * Secure translation through a selector
 * @param local the Localization
 * @returns a ComponentLocalizer object that contains the translation
 */
var FileItemLocalizerSelector = function (local) {
    switch (local) {
        case "ES-es": return FileItemLocalizer["ES-es"];
        case "EN-en": return FileItemLocalizer["EN-en"];
        case "FR-fr": return FileItemLocalizer["FR-fr"];
        case "IT-it": return FileItemLocalizer["IT-it"];
        case "PT-pt": return FileItemLocalizer["PT-pt"];
        case "RU-ru": return FileItemLocalizer["RU-ru"];
        case "ZH-cn": return FileItemLocalizer["ZH-cn"];
        case "ZH-hk": return FileItemLocalizer["ZH-hk"];
        default: return FileItemLocalizer["EN-en"];
    }
};

var DropzoneLocalizer = {
    "ES-es": DropzoneSpanish,
    "EN-en": DropzoneEnglish,
    "FR-fr": DropzoneFrench,
    "IT-it": DropzoneItalian,
    "PT-pt": DropzonePortuguese,
    "RU-ru": DropzoneRussian,
    "ZH-cn": DropzoneSimplifiedChinese,
    "ZH-hk": DropzoneTraditionalChinese
};
/**
 * Secure translation through a selector
 * @param local the Localization
 * @returns a ComponentLocalizer object that contains the translation
 */
var DropzoneLocalizerSelector = function (local) {
    switch (local) {
        case "ES-es": return DropzoneLocalizer["ES-es"];
        case "EN-en": return DropzoneLocalizer["EN-en"];
        case "FR-fr": return DropzoneLocalizer["FR-fr"];
        case "IT-it": return DropzoneLocalizer["IT-it"];
        case "PT-pt": return DropzoneLocalizer["PT-pt"];
        case "RU-ru": return DropzoneLocalizer["RU-ru"];
        case "ZH-cn": return DropzoneLocalizer["ZH-cn"];
        case "ZH-hk": return DropzoneLocalizer["ZH-hk"];
        default: return DropzoneLocalizer["EN-en"];
    }
};

var ValidateErrorLocalizer = {
    "ES-es": ValidateErrorSpanish,
    "EN-en": ValidateErrorEnglish,
    "FR-fr": ValidateErrorFrench,
    "IT-it": ValidateErrorItalian,
    "PT-pt": ValidateErrorPortuguese,
    "RU-ru": ValidateErrorRussian,
    "ZH-cn": ValidateErrorSimplifiedChinese,
    "ZH-hk": ValidateErrorTraditionalChinese,
};
/**
 * Secure translation through a selector
 * @param local the Localization
 * @returns a ComponentLocalizer object that contains the translation
 */
var ValidateErrorLocalizerSelector = function (local) {
    if (!local || !["ES-es", "EN-en", "FR-fr", "IT-it", "PT-pt", "RU-ru", "ZH-cn", "ZH-hk"].includes(local)) {
        return ValidateErrorLocalizer["EN-en"];
    }
    return ValidateErrorLocalizer[local];
};

/**
 * Reads an image (or other type) file as data URL in a promise way,
 * so you can use await.
 * It will return a string that contains the URL representation
 * @param file File or Blob object
 * @returns data URL of the file
 */
var readAsDataURL = function (file, onProgress, onError) {
    return new Promise(function (resolve, reject) {
        try {
            var reader_1 = new FileReader();
            reader_1.onprogress = function () {
                onProgress === null || onProgress === void 0 ? void 0 : onProgress();
            };
            reader_1.onerror = function () {
                onError === null || onError === void 0 ? void 0 : onError();
            };
            reader_1.onload = function () {
                resolve(reader_1.result);
            };
            reader_1.readAsDataURL(file);
        }
        catch (error) {
            reject(undefined);
        }
    });
};
/**
 * Reads a file as Text in a promise way, so you can use await.
 * If other kind of file is sent, this function will read it anyway
 * and will return a string that contains the URL representation
 * @param file File or Blob object
 * @param encoding The type of encoding such as "base64"
 * @returns data text of the file
 */
var readAsText = function (file, encoding, onProgress, onError) {
    return new Promise(function (resolve, reject) {
        try {
            var reader_2 = new FileReader();
            reader_2.onload = function () {
                resolve(reader_2.result);
            };
            reader_2.onprogress = function () {
                onProgress === null || onProgress === void 0 ? void 0 : onProgress();
            };
            reader_2.onerror = function () {
                onError === null || onError === void 0 ? void 0 : onError();
            };
            reader_2.readAsText(file, encoding ? encoding : "base64");
        }
        catch (error) {
            reject(undefined);
        }
    });
};
/**
 * Reads a file and return the raw binary data from the file.
 * @param file File or Blob object
 * @param encoding The type of encoding such as "base64"
 * @returns raw binary data of the file
 */
var readAsBinaryString = function (file, onProgress, onError) {
    return new Promise(function (resolve, reject) {
        try {
            var reader_3 = new FileReader();
            reader_3.onload = function () {
                resolve(reader_3.result);
            };
            reader_3.onprogress = function () {
                onProgress === null || onProgress === void 0 ? void 0 : onProgress();
            };
            reader_3.onerror = function () {
                onError === null || onError === void 0 ? void 0 : onError();
            };
            reader_3.readAsBinaryString(file);
        }
        catch (error) {
            reject(undefined);
        }
    });
};
/**
 * Reads a file and returns an ArrayBuffer representing the file's data
 * @param file File or blob object
 * @param encoding The type of encoding such as "base64"
 * @returns ArrayBuffer representation of the file
 */
var readAsArrayBuffer = function (file, onProgress, onError) {
    return new Promise(function (resolve, reject) {
        try {
            var reader_4 = new FileReader();
            reader_4.onload = function () {
                resolve(reader_4.result);
            };
            reader_4.onprogress = function () {
                onProgress === null || onProgress === void 0 ? void 0 : onProgress();
            };
            reader_4.onerror = function () {
                onError === null || onError === void 0 ? void 0 : onError();
            };
            reader_4.readAsArrayBuffer(file);
        }
        catch (error) {
            reject(undefined);
        }
    });
};

/**
 * Resize an image resolution given maxWidth and maxHeight
 *
 * Should be called with await
 * @param base64Str a string representation of an imae file
 * @param maxWidth the max width of he image
 * @param maxHeight the max height of he image
 * @returns the resized image
 */
function resizeImage(base64Str, maxWidth, maxHeight) {
    if (maxWidth === void 0) { maxWidth = 135; }
    if (maxHeight === void 0) { maxHeight = 120; }
    return new Promise(function (resolve, reject) {
        try {
            var img_1 = new Image();
            img_1.src = base64Str;
            img_1.onload = function () {
                var canvas = document.createElement('canvas');
                var MAX_WIDTH = maxWidth;
                var MAX_HEIGHT = maxHeight;
                var width = img_1.width;
                var height = img_1.height;
                if (maxWidth > width && maxHeight > height) {
                    resolve(base64Str);
                }
                else if (width > height) {
                    if (width > MAX_WIDTH) {
                        height *= MAX_WIDTH / width;
                        width = MAX_WIDTH;
                    }
                }
                else {
                    if (height > MAX_HEIGHT) {
                        width *= MAX_HEIGHT / height;
                        height = MAX_HEIGHT;
                    }
                }
                canvas.width = width;
                canvas.height = height;
                var ctx = canvas.getContext('2d');
                if (ctx) {
                    ctx.drawImage(img_1, 0, 0, width, height);
                    resolve(canvas.toDataURL());
                }
                else {
                    if (process.env.NODE_ENV === "development") {
                        console.error("An error ocurred when trying to make a thumnail");
                    }
                    reject(undefined);
                }
            };
        }
        catch (error) {
            if (process.env.NODE_ENV === "development") {
                console.error("An error ocurred when trying to make a thumnail");
            }
            reject(undefined);
        }
    });
}

/**
 * Resize an image resolution given maxWidth and maxHeight
 *
 * Should be called with await
 * @param base64Str a string representation of an imae file
 * @param maxWidth the max width of he image
 * @param maxHeight the max height of he image
 * @returns the resized image
 */
function getImageOrientation(imageSource) {
    return new Promise(function (resolve, reject) {
        //console.log("getImageOrientation imageSource", imageSource);
        if (!imageSource || imageSource.length === 0) {
            // console.log("getImageOrientation rejected", imageSource);
            reject("landscape");
            return;
        }
        try {
            //console.log("getImageOrientation try ini", imageSource);
            var img_1 = new Image();
            img_1.src = imageSource;
            img_1.onerror = function (ev) {
                //console.log("getImageOrientation There was a ne error reading", ev);
                reject("landscape");
            };
            img_1.onload = function () {
                var width = img_1.width;
                var height = img_1.height;
                if (width > height) {
                    resolve("landscape");
                }
                else {
                    resolve("portrait");
                }
            };
        }
        catch (error) {
            //console.error("An error ocurred when trying to get the image orientation");
            if (process.env.NODE_ENV === "development") {
                console.error("An error ocurred when trying to get the image orientation");
            }
            reject("landscape");
        }
    });
}

var sevenzip = "https://user-images.githubusercontent.com/43678736/132086517-72a51a12-e403-4675-bfd7-22c23affa730.png";
var aac = "https://user-images.githubusercontent.com/43678736/132086518-7026d4f1-ea16-4ed0-89fd-37c1aa8ac3ed.png";
var abw = "https://user-images.githubusercontent.com/43678736/132086519-863c63b4-917e-4471-94ff-7e15651cc14b.png";
var accdb = "https://user-images.githubusercontent.com/43678736/132086520-9bc6aa3b-51c9-4da2-9ef7-349162b86d0b.png";
var avi = "https://user-images.githubusercontent.com/43678736/132086521-dbd6cf0d-d4d7-4b92-bb26-17e8a51a9383.png";
var azw = "https://user-images.githubusercontent.com/43678736/132086522-070f48e8-78a8-4294-8dbb-aab81525e164.png";
var bmp = "https://user-images.githubusercontent.com/43678736/132086595-90ab7f90-f87e-4900-94d9-d0b26745df48.png";
var bz = "https://user-images.githubusercontent.com/43678736/132086597-e285ad5c-613a-4679-a270-493e5be4ffd9.png";
var bz2 = "https://user-images.githubusercontent.com/43678736/132086598-623c410a-084a-4395-a448-211b2ff61cfe.png";
var cda = "https://user-images.githubusercontent.com/43678736/132086600-8b70a007-512d-4252-9c66-eabd3ddd6573.png";
var csh = "https://user-images.githubusercontent.com/43678736/132086601-e62e5d1a-d8a2-4475-a14f-85922cec9272.png";
var css = "https://user-images.githubusercontent.com/43678736/132086602-4c772934-f608-4f01-8459-c4622cee8ad5.png";
var csv = "https://user-images.githubusercontent.com/43678736/132086604-b5b019fe-572e-477e-92c2-3769a48a1304.png";
var docx = "https://user-images.githubusercontent.com/43678736/132086606-715ccb66-4702-4f7d-9b09-ac93ba17b643.png";
var drawio = "https://user-images.githubusercontent.com/43678736/132086608-bcae9d57-8e54-488c-90c4-4952ae530b5e.png";
var eot = "https://user-images.githubusercontent.com/43678736/132086618-397d6bd2-9fda-43ed-a135-cb40388c35af.png";
var epub = "https://user-images.githubusercontent.com/43678736/132086620-2586ba40-c583-4589-b1a4-8bb5b258b44d.png";
var freearc = "https://user-images.githubusercontent.com/43678736/132086621-3b95fb64-2533-4ccc-abcd-bd2beba572e9.png";
var gif = "https://user-images.githubusercontent.com/43678736/132086622-af705a0c-2b25-4ba7-8ab6-bd69ec97f7e2.png";
var gzip = "https://user-images.githubusercontent.com/43678736/132086624-89141a46-64e4-4fa0-bf69-54a0eb4d48c9.png";
var html = "https://user-images.githubusercontent.com/43678736/132086625-1b8f2652-1de0-4475-8c12-7da4a9973ffb.png";
var icalendar = "https://user-images.githubusercontent.com/43678736/132086626-38699705-1e6f-4bca-984b-03167b236faa.png";
var java = "https://user-images.githubusercontent.com/43678736/132086650-f1166246-b361-4c30-a04e-9781c555d14a.png";
var jar = "https://user-images.githubusercontent.com/43678736/132086650-f1166246-b361-4c30-a04e-9781c555d14a.png";
var javascript = "https://user-images.githubusercontent.com/43678736/132086652-4562942e-aaea-466c-968f-380fffabf3f9.png";
var jpeg = "https://user-images.githubusercontent.com/43678736/132086653-0487e7e2-1ee3-49e2-8cfe-3e20f1f7490a.png";
var json = "https://user-images.githubusercontent.com/43678736/132086656-6e96c815-e4e2-4ffd-9d71-57e9cc2450bc.png";
var jsonld = "https://user-images.githubusercontent.com/43678736/132086658-5d27d3c2-394f-43fb-b512-9b414a257875.png";
var midi = "https://user-images.githubusercontent.com/43678736/132086659-98f3ef6e-b9f3-4b6d-b18f-469b5334ba27.png";
var mp3 = "https://user-images.githubusercontent.com/43678736/132086661-a5484553-06c7-4ffa-a8f9-96b57b1b0344.png";
var mp4 = "https://user-images.githubusercontent.com/43678736/132086662-05ad1597-d5e5-4efa-833e-2876e966a745.png";
var mpeg = "https://user-images.githubusercontent.com/43678736/132086663-90c58955-f7fb-4bdb-ac53-92667d16d4a3.png";
var mpkg = "https://user-images.githubusercontent.com/43678736/132086664-9a7530e7-6d78-4ef3-a176-20cf7f57b555.png";
var octet = "https://user-images.githubusercontent.com/43678736/132086666-ab3c505d-b2c0-4177-9a06-aed5d9c39ee4.png";
var odp = "https://user-images.githubusercontent.com/43678736/132086667-6c7dcbcc-8d83-41a2-8e0a-85b09e2791ae.png";
var ods = "https://user-images.githubusercontent.com/43678736/132086668-9f246e91-cf2e-49cf-9617-e1fbb71abbbb.png";
var odt = "https://user-images.githubusercontent.com/43678736/132086669-46113762-84d1-4b32-9441-b0138ce17a5d.png";
var oga = "https://user-images.githubusercontent.com/43678736/145835364-2054509d-3448-4d34-921f-73dd6e297fc7.png";
var ogv = "https://user-images.githubusercontent.com/43678736/145835367-19172bf8-cd5a-4cbe-b512-d0de1d91f269.png";
var ogx = "https://user-images.githubusercontent.com/43678736/145835373-a57ef0f5-3968-483b-9f55-6d67e7f1dcea.png";
var opus = "https://user-images.githubusercontent.com/43678736/132086670-0f96e770-cedc-4635-a5f9-cf97894c1d7a.png";
var otf = "https://user-images.githubusercontent.com/43678736/132086671-02ad35ef-ec3a-4a65-abd5-5bf794dfcf7b.png";
var pdf = "https://user-images.githubusercontent.com/43678736/132086672-3a856fda-823d-4997-b802-c7c640e6ef44.png";
var php = "https://user-images.githubusercontent.com/43678736/132086673-0c4409ab-754e-4619-8cfa-179d0ccf1bd9.png";
var png = "https://user-images.githubusercontent.com/43678736/132086674-fdb56d02-5845-49b7-8462-6357bc963464.png";
var pptx = "https://user-images.githubusercontent.com/43678736/132086675-c879645d-acb4-41a6-ab3c-4e6c2048badb.png";
var psd = "https://user-images.githubusercontent.com/43678736/132086685-4e327c4c-a409-4b83-b36a-8d88936b314b.png";
var python = "https://user-images.githubusercontent.com/43678736/132086688-8e82fae4-3a9b-49c0-bf99-77189525514c.png";
var tar = "https://user-images.githubusercontent.com/43678736/132086689-fe1fef9f-d2db-455b-8f4b-09acd095f571.png";
var rar = "https://user-images.githubusercontent.com/43678736/132086689-fe1fef9f-d2db-455b-8f4b-09acd095f571.png";
var react = "https://user-images.githubusercontent.com/43678736/132086691-d472576b-ec6a-4332-acd2-dd6a00b72952.png";
var rtf = "https://user-images.githubusercontent.com/43678736/132086693-9d43571e-0c86-438f-b247-e2cb42e19e06.png";
var sass = "https://user-images.githubusercontent.com/43678736/132086694-4e661d6a-1118-441e-8bc3-c52fcb2133b6.png";
var sh = "https://user-images.githubusercontent.com/43678736/132086697-1d82d724-35b6-4f06-847a-3c59a5deda6e.png";
var swf = "https://user-images.githubusercontent.com/43678736/132086698-19384230-dbd7-4e05-bc69-ef4537b6aae3.png";
var text = "https://user-images.githubusercontent.com/43678736/132086699-5993a482-04f4-4915-b105-9037f527cf61.png";
var tiff = "https://user-images.githubusercontent.com/43678736/132086700-c23461c8-6819-46e1-aecd-0a1f8d3507bb.png";
var ttf = "https://user-images.githubusercontent.com/43678736/132086701-c8044c09-8d95-4af1-9410-66761001d7da.png";
var typescript = "https://user-images.githubusercontent.com/43678736/132086702-59294337-ed99-4302-badd-316b2c1ff62f.png";
var vsd = "https://user-images.githubusercontent.com/43678736/132086704-8fd51e7c-afa2-47a3-ab2f-d0bcd0ecae9f.png";
var vue = "https://user-images.githubusercontent.com/43678736/132086705-33294da1-5c0f-49f7-b890-e4857cec0a6d.png";
var wav = "https://user-images.githubusercontent.com/43678736/132086706-22f805d0-39d4-494b-824e-47dc75d05eb7.png";
var webm = "https://user-images.githubusercontent.com/43678736/132086707-e61a84de-d396-4dbf-8d1b-1d6ee19e1ac8.png";
var weba = "https://user-images.githubusercontent.com/43678736/132086707-e61a84de-d396-4dbf-8d1b-1d6ee19e1ac8.png";
var webp = "https://user-images.githubusercontent.com/43678736/132086708-21d096dd-7148-40aa-97f1-cbb099339740.png";
var wma = "https://user-images.githubusercontent.com/43678736/132086709-811d4e90-3cfa-4044-a956-aeda9c67fc92.png";
var wmv = "https://user-images.githubusercontent.com/43678736/132086710-c5479c6c-0249-4542-adad-48b0ef40b775.png";
var woff = "https://user-images.githubusercontent.com/43678736/132086711-1524a3e7-3e33-4822-a34f-ff3235404045.png";
var xlsx = "https://user-images.githubusercontent.com/43678736/132086712-17e2c491-f6e4-4586-aef6-06bcc5f4b0e5.png";
var xml = "https://user-images.githubusercontent.com/43678736/132086715-204b5a8b-9c5a-4bac-8294-9237ebc16089.png";
var xul = "https://user-images.githubusercontent.com/43678736/132086716-64511d20-58cb-45a8-85df-f4d9408b469d.png";
var zip = "https://user-images.githubusercontent.com/43678736/132086718-a8499333-6282-4820-aa1f-4d133eb54648.png";

/**
 * Looks for the first file extension
 * @param fileName file name
 * @returns the file name extension
 */
var getExt = function (fileName) {
    var re = /(?:\.([^.]+))?$/;
    var result = re.exec(fileName);
    if (result) {
        return result[1];
    }
    else {
        return "";
    }
};

var DEF_GEN_MIME = "octet";
/**
 *
 * @param tailMime
 * @returns
 */
var audioSelector = function (tailMime) {
    switch (tailMime) {
        case "aac": return "aac";
        case "midi": return "midi";
        case "x-midi": return "midi";
        case "mpeg": return "mpeg"; //mp3
        case "ogg": return "oga";
        case "opus": return "opus";
        case "wav": return "wav";
        case "webm": return "webm";
        //case "3gpp": return "threegp";
        //case "3gpp2": return "threegp";
        //case "mp3": return "mp3";
        case "wma": return "wma";
        default: return DEF_GEN_MIME;
    }
};
var textSelector = function (tailMime) {
    switch (tailMime) {
        case "css": return "css";
        case "csv": return "csv";
        case "html": return "html";
        case "calendar": return "icalendar";
        case "javascript": return "javascript";
        case "x-javascript": return "javascript";
        case "plain": return "text";
        case "xml": return "xml";
        default: return DEF_GEN_MIME;
    }
};
var imageSelector = function (tailMime) {
    switch (tailMime) {
        case "bmp": return "bmp";
        case "gif": return "gif";
        // case "vnd.microsoft.icon": return "ico";
        //case "ico": return "ico";
        case "jpg": return "jpeg";
        case "jpeg": return "jpeg";
        case "png": return "png";
        //case "svg+xml": return "svg";
        //case "svg": return "svg";
        case "tiff": return "tiff";
        case "webp": return "webp";
        default: return DEF_GEN_MIME;
    }
};
var fontSelector = function (tailMime) {
    switch (tailMime) {
        case "otf": return "otf";
        case "ttf": return "ttf";
        case "woff": return "woff";
        case "woff2": return "woff";
        default: return DEF_GEN_MIME;
    }
};
var videoSelector = function (tailMime) {
    switch (tailMime) {
        case "x-msvideo": return "avi";
        case "msvideo": return "avi";
        case "avi": return "avi";
        case "mp4": return "mp4";
        case "mpeg": return "mpeg";
        case "ogg": return "ogv";
        case "mp2t": return "mp2t";
        case "wmv": return "wmv";
        case "webm": return "webm";
        // case "3gpp": return "threegp";
        // case "3gpp2": return "threegp2";
        default: return DEF_GEN_MIME;
    }
};
/**
 *
 * @param tailMime
 * @returns
 */
var applicationSelector = function (tailMime) {
    switch (tailMime) {
        case "x-abiword": return "abw";
        case "abiword": return "abw";
        case "x-freearc": return "arc";
        case "freearc": return "arc";
        case "vnd.amazon.ebook": return "azw";
        case "octet-stream": return "octet";
        case "x-bzip": return "bz";
        case "x-bzip2": return "bz2";
        case "bzip": return "bz";
        case "bzip2": return "bz2";
        case "x-cdf": return "cda";
        case "msaccess": return "accdb";
        case "csh": return "csh";
        case "x-csh": return "csh";
        case "vnd.ms-fontobject": return "eot";
        case "epub+zip": return "epub";
        case "gzip": return "gzip";
        case "java-archive": return "jar";
        case "x-javascript": return "javascript";
        case "json": return "json";
        case "ld+json": return "jsonld";
        case "vnd.apple.installer+xml": return "mpkg";
        case "ogg": return "ogx";
        case "vnd.rar": return "rar";
        case "rtf": return "rtf";
        case "x-sh": return "sh";
        case "sh": return "sh";
        case "x-shockwave-flash": return "swf";
        case "x-tar": return "tar";
        case "x-httpd-php": return "php";
        case "vnd.visio": return "vsd";
        case "xhtml+xml": return "xhtml";
        case "xml": return "xml";
        case "vnd.mozilla.xul+xml": return "xul";
        case "vnd.openxmlformats-officedocument.wordprocessingml.document": return "docx";
        case "msword": return "docx";
        case "vnd.openxmlformats-officedocument.spreadsheetml.sheet": return "xlsx";
        case "vnd.openxmlformats-officedocument.presentationml.presentation": return "pptx";
        case "vnd.ms-powerpoint": return "pptx";
        case "vnd.oasis.opendocument.presentation": return "odp";
        case "vnd.oasis.opendocument.text": return "odt";
        case "vnd.oasis.opendocument.spreadsheet": return "ods";
        case "zip": return "zip";
        case "x-zip-compressed": return "zip";
        case "pdf": return "pdf";
        default: return DEF_GEN_MIME;
    }
};
/**
 * Selects to wich mime type the mime type given belongs to
 * @param mimeType mime type to be searched
 * @returns the generic type,
if not found it return "octet" that means generic binary file
 */
var mimeSelector = function (mimeType) {
    // let genericMime: string | undefined = undefined;
    if (!mimeType || !mimeType.includes("/")) {
        return DEF_GEN_MIME;
    }
    var headerMime = mimeType.split("/")[0];
    var tailMime = mimeType.split("/")[1];
    /**
     * Every mimetype that
     * starts with: "application/...."
     */
    switch (headerMime) {
        case "application": return applicationSelector(tailMime);
        case "audio": return audioSelector(tailMime);
        case "video": return videoSelector(tailMime);
        case "text": return textSelector(tailMime);
        case "image": return imageSelector(tailMime);
        case "font": return fontSelector(tailMime);
        default: return DEF_GEN_MIME;
    }
};
/**
 * Selects to wich mapped extension
 * the given exension belongs to
 *
 * @param extension
 * @returns
 */
var extensionSelector = function (extension) {
    var genericMime = "octet";
    if (extension && extension !== "") {
        if (extension.includes("zip") || extension.includes("rar")) {
            genericMime = "zip";
        }
        else if (extension.includes("doc")) {
            genericMime = "docx";
        }
        else if (extension.includes("xls")) {
            genericMime = "xlsx";
        }
        else if (extension.includes("drawio")) {
            genericMime = "drawio";
        }
        else if (extension.includes("psd")) {
            genericMime = "psd";
        }
        else if (extension.includes("csv")) {
            genericMime = "csv";
        }
        else if (extension === "jsx") {
            genericMime = "react";
        }
        else if (extension === "py") {
            genericMime = "python";
        }
        else if (extension === "vue") {
            genericMime = "vue";
        }
        else if (extension === "java") {
            genericMime = "java";
        }
        else if (extension === "ts") {
            genericMime = "typescript";
        }
        else if (extension === "sass" || extension === "scss") {
            genericMime = "sass";
        }
    }
    return genericMime;
};
/**
 * Chack for extention whether the file is code os not
 * @param extension
 * @returns
 */
var checkIsCode = function (extension) {
    var genericMime = "text";
    if (extension && extension !== "") {
        if (extension === "jsx") {
            genericMime = "react";
        }
        else if (extension === "py") {
            genericMime = "python";
        }
        else if (extension === "vue") {
            genericMime = "vue";
        }
        else if (extension === "java") {
            genericMime = "java";
        }
        else if (extension === "ts" || extension === "tsx") {
            genericMime = "typescript";
        }
        else if (extension === "js") {
            genericMime = "javascript";
        }
        else if (extension === "xml") {
            genericMime = "xml";
        }
        else if (extension === "php") {
            genericMime = "php";
        }
    }
    return genericMime;
};
/**
 * Looks for a suitable file icon
 * If not found, returns octet-stream url
 * @param props mime and extension from file to search
 * @returns the result file ico
 */
var getURLFileIco = function (file, customIcons) {
    var result = "fallBack";
    //if not file, return octet
    if (!file) {
        result = DEF_GEN_MIME;
        if (customIcons === null || customIcons === void 0 ? void 0 : customIcons.fallBack)
            return { url: customIcons === null || customIcons === void 0 ? void 0 : customIcons.fallBack, mimeResume: result };
        return { url: mimeUrlList[result], mimeResume: result };
    }
    else {
        result = mimeSelector(file.type);
    }
    //If plain text
    var extention = getExt(file.name);
    if (result === "text") {
        result = checkIsCode(extention);
    }
    //If octet stream result, second chance: file extention
    if (result === DEF_GEN_MIME) {
        result = extensionSelector(extention);
    }
    var customUrl = customIcons === null || customIcons === void 0 ? void 0 : customIcons[result];
    if (customUrl !== undefined)
        return { url: customUrl, mimeResume: result };
    return { url: mimeUrlList[result], mimeResume: result };
};
/**
 * Looks for a suitable file icon
 * @param props mime and extension from file to search
 * @returns the result file ico, if not found, turns octet-stream url
 */
var getURLFileIcoFromNameAndType = function (name, type, customIcons) {
    var result = "octet";
    //if not nam and type, return octet
    if (!name) {
        result = DEF_GEN_MIME;
        if (customIcons === null || customIcons === void 0 ? void 0 : customIcons.fallBack)
            return { url: customIcons === null || customIcons === void 0 ? void 0 : customIcons.fallBack, mimeResume: result };
        return { url: mimeUrlList[result], mimeResume: result };
    }
    else {
        result = mimeSelector(type);
    }
    //If plain text
    var extention = getExt(name);
    if (result === "text") {
        result = checkIsCode(extention);
    }
    //If octet stream result, second chance: file extention
    if (result === DEF_GEN_MIME) {
        result = extensionSelector(extention);
    }
    var customUrl = customIcons === null || customIcons === void 0 ? void 0 : customIcons[result];
    if (customUrl !== undefined)
        return { url: customUrl, mimeResume: result };
    return { url: mimeUrlList[result], mimeResume: result };
};
var mimeUrlList = {
    aac: aac,
    accdb: accdb,
    abw: abw,
    arc: freearc,
    avi: avi,
    azw: azw,
    octet: octet,
    bmp: bmp,
    bz: bz,
    bz2: bz2,
    cda: cda,
    csh: csh,
    css: css,
    csv: csv,
    docx: docx,
    drawio: drawio,
    eot: eot,
    epub: epub,
    gzip: gzip,
    gif: gif,
    html: html,
    //ico: ico,
    icalendar: icalendar,
    jar: jar,
    jpeg: jpeg,
    javascript: javascript,
    json: json,
    jsonld: jsonld,
    midi: midi,
    //  js: js,
    mp3: mp3,
    mp4: mp4,
    mpeg: mpeg,
    mpkg: mpkg,
    mp2t: octet,
    odp: odp,
    ods: ods,
    odt: odt,
    oga: oga,
    ogv: ogv,
    ogx: ogx,
    opus: opus,
    otf: otf,
    png: png,
    pdf: pdf,
    php: php,
    pptx: pptx,
    psd: psd,
    rar: rar,
    rtf: rtf,
    sass: sass,
    sh: sh,
    //svg: svg,
    swf: swf,
    tar: tar,
    tiff: tiff,
    ttf: ttf,
    //ts: ts,
    typescript: typescript,
    text: text,
    vsd: vsd,
    wav: wav,
    weba: weba,
    webm: webm,
    webp: webp,
    woff: woff,
    wma: wma,
    wmv: wmv,
    xhtml: html,
    xlsx: xlsx,
    xml: xml,
    xul: xul,
    zip: zip,
    // threegp: threegp,
    sevenzip: sevenzip,
    python: python,
    java: java,
    react: react,
    vue: vue,
    fallBack: octet,
};

/**
 * A class definition for ExtFile.
 * This class has the purpose to allow the creation of instances
 * of an ExtFile for performing complex operations that cannot be
 * accomplished just by using the ExtFile type.
 * For instance, it can help in changing the value of some attributes
 * across different scopes thanks to memory reference.
 */
var ExtFileInstance = /** @class */ (function () {
    function ExtFileInstance(extFile) {
        var id = extFile.id, file = extFile.file, name = extFile.name, size = extFile.size, type = extFile.type, imageUrl = extFile.imageUrl, valid = extFile.valid, errors = extFile.errors, uploadMessage = extFile.uploadMessage, uploadStatus = extFile.uploadStatus, progress = extFile.progress, xhr = extFile.xhr, extraData = extFile.extraData, extraUploadData = extFile.extraUploadData, serverResponse = extFile.serverResponse, downloadUrl = extFile.downloadUrl, videoUrl = extFile.videoUrl, uploadUrl = extFile.uploadUrl;
        this.id = id;
        this.file = file;
        this.name = name;
        this.size = size;
        this.type = type;
        this.imageUrl = imageUrl;
        this.valid = valid;
        this.errors = errors;
        this.uploadStatus = uploadStatus;
        this.uploadMessage = uploadMessage;
        this.progress = progress;
        this.xhr = xhr;
        this.extraData = extraData;
        this.extraUploadData = extraUploadData;
        this.serverResponse = serverResponse;
        this.downloadUrl = downloadUrl;
        this.videoUrl = videoUrl;
        this.uploadUrl = uploadUrl;
    }
    /**
     * method under construction
     */
    /*  private static kamuiFile() {
 
     }
    /**
     * Copies all non undefined attributes from ExtFileInstance to a new ExtFile object
     * @param extFileInstance the instance of ExtFile
     * @returns an ExtFile object
     */
    ExtFileInstance.toExtFile = function (extFileInstance) {
        //console.log("before toExtFile()", extFileInstance);
        var extFileClone = {}; // the new empty object
        var extFileInstanceKeys = Object.keys(extFileInstance);
        var extFileInstanceValues = Object.values(extFileInstance);
        // let's copy all user properties into it
        for (var i = 0; i < extFileInstanceValues.length; i++) {
            var currentValue = extFileInstanceValues[i];
            var currKey = extFileInstanceKeys[i];
            if (currentValue !== undefined) {
                extFileClone[currKey] = currentValue;
            }
        }
        //console.log("after toExtFile()", extFileClone);
        //console.log("current extFileClone keys",Object.keys( extFileClone).length);
        return extFileClone;
    };
    /**
     * Copies all non undefined attributes from ExtFileInstance to a new ExtFile object.
     * @returns an ExtFile object
     */
    ExtFileInstance.prototype.toExtFile = function () {
        return ExtFileInstance.toExtFile(this);
    };
    /*   static mock = (id?: number): ExtFileInstance => {
          return new ExtFileInstance(
              extFileMock(id)
          );
      } */
    ExtFileInstance.hasValidUrl = function (extFile) {
        return extFile.uploadUrl && extFile.uploadUrl.length > 0;
    };
    ExtFileInstance.someValidUrl = function (extFile) {
        return extFile.some(ExtFileInstance.hasValidUrl);
    };
    return ExtFileInstance;
}());

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var ExtFileManager = /** @class */ (function () {
    function ExtFileManager() {
    }
    /**
     * Increases the id counter and returns the next id available.
     * @returns the next integer id available
     */
    ExtFileManager.getNextId = function () {
        ExtFileManager.nextId++;
        return ExtFileManager.nextId;
    };
    /**
     * Updates a dui file list given an id
     * @param id id of the fileList
     * @param extFiles list of DuiFiles forinitializing the array
     * @returns the id of the fileList
     */
    ExtFileManager.setFileList = function (id, extFilesInstances) {
        if (!id) {
            return 0;
        }
        else {
            ExtFileManager.fileLists[id] = __spreadArray([], extFilesInstances, true);
            return id;
        }
    };
    /**
     * Generates a new ID
     * @returns the next Id asociated with a DuiFIle list
     */
    ExtFileManager.createFileListMap = function () {
        var nextId = ExtFileManager.getNextId();
        ExtFileManager.fileLists[nextId] = [];
        return nextId;
    };
    /**
     * Deletes a list map
     * @returns the next Id asociated with a DuiFIle list
     */
    ExtFileManager.removeFileListMap = function (id) {
        if (!id) {
            return 0;
        }
        else {
            try {
                ExtFileManager.fileLists[id] = undefined;
                return id;
            }
            catch (error) {
                if (process.env.NODE_ENV === "development")
                    console.error("Error on remove", error);
                return 0;
            }
        }
    };
    /**
     *
     * @param id the id of the dropzone
     * @returns
     */
    ExtFileManager.getExtFileInstanceList = function (id) {
        try {
            if (!id) {
                return undefined;
            }
            return ExtFileManager.fileLists[id];
        }
        catch (error) {
            if (process.env.NODE_ENV === "development")
                console.error("Error on getExtFileInstanceList", error);
            return undefined;
        }
    };
    /**
     * Updates(replaces) the extFile list on preparing stage and returns the new array.
     * Removes the non valid files if cleanOnUpload is true and validateFiles is also true
     * Then sets on preparing stage all files according to the following creiteria:
     * If theuploadStatus is diferent than "sucess" AND
     * then, update the files on preparing stage. Otherwise keep the extFile props.
     * Finally, updates the ExtFileInstance list on ExtFileManager.
     * @param dropzoneId the id to access the right list
     * @param localFiles the list of extFiles
     * @param validateFiles flag that indicates that validation is active or o¿not
     * @param cleanOnUpload flag to determine whther to clena the list oof non valid files or not
     * @returns a list of ExtFileInstance
     */
    ExtFileManager.setFileListMapPreparing = function (dropzoneId, localFiles, validateFiles, cleanOnUpload) {
        //console.log("setFileListMapPreparing before if", dropzoneId, localFiles, cleanOnUpload);
        if (!(typeof dropzoneId === "number" || typeof dropzoneId === "string"))
            return undefined;
        //console.log("setFileListMapPreparing before try", localFiles, cleanOnUpload);
        try {
            var resultExtList = [];
            //initializes the extFileLInstance list
            var temLocalFiles = __spreadArray([], localFiles, true);
            //remove non valids if cleanOnUpload is true and validateFiles is also true
            if (cleanOnUpload && validateFiles) {
                // clean on Upload is true, so non valid files must be removed
                temLocalFiles = temLocalFiles.filter(function (extFile) { return extFile.valid; });
                //console.log("temLocalFiles filter", temLocalFiles);
            }
            //console.log("setFileListMapPreparing after remove non valids", temLocalFiles);
            if (validateFiles) {
                // validation flag was set to true, so only valid=true files will be set to "preparing"
                //so, only valid files was kept in the temLocalfiles array
                //now set the preparing state only for files with uploadStatus !== "success"
                temLocalFiles =
                    temLocalFiles
                        .map(function (extFile) {
                        if (extFile.uploadStatus !== "success" && extFile.valid) {
                            return __assign(__assign({}, extFile), { uploadStatus: "preparing" });
                        }
                        else {
                            return __assign({}, extFile);
                        }
                    });
            }
            else {
                // all files will be set to "preparing" whether the valid value
                // except those files with uploadStatus ==="success"
                temLocalFiles =
                    temLocalFiles
                        .map(function (extFile) {
                        if (extFile.uploadStatus !== "success") {
                            return __assign(__assign({}, extFile), { uploadStatus: "preparing" });
                        }
                        else {
                            return __assign({}, extFile);
                        }
                    });
            }
            //console.log("setFileListMapPreparing result", temLocalFiles);
            //converto to Object instances
            resultExtList = temLocalFiles.map(function (F) { return new ExtFileInstance(F); });
            //console.log("setFileListMapPreparing RESULT resultExtList", resultExtList);
            var resultSet = ExtFileManager.setFileList(dropzoneId, resultExtList);
            //console.log("setFileListMapPreparing RESULT resultSet", resultSet);
            return resultExtList;
            // return ExtFileManager.fileLists[dropzoneId];
        }
        catch (error) {
            if (process.env.NODE_ENV === "development")
                console.error("setFileListMapPreparing Error on get List", error);
            return undefined;
        }
    };
    /**
 * Updates(replaces) the extFile list on preparing stage and returns the new array.
 * Removes the non valid files if cleanOnUpload is true and validateFiles is also true
 * Then sets on preparing stage all files according to the following creiteria:
 * If theuploadStatus is diferent than "sucess" AND
 * then, update the files on preparing stage. Otherwise keep the extFile props.
 * Finally, updates the ExtFileInstance list on ExtFileManager.
 * @param dropzoneId the id to access the right list
 * @param localFiles the list of extFiles
 * @param validateFiles flag that indicates that validation is active or o¿not
 * @param cleanOnUpload flag to determine whther to clena the list oof non valid files or not
 * @returns a list of ExtFileInstance
 */
    ExtFileManager.setFileListMapPreparing2 = function (dropzoneId, localFiles, validateFiles, cleanOnUpload) {
        ExtFileManager.setFileList(dropzoneId, localFiles.map(function (F) { return new ExtFileInstance(__assign(__assign({}, F), { uploadStatus: "preparing" })); }));
        return ExtFileManager.getExtFileInstanceList(dropzoneId);
    };
    ExtFileManager.nextId = 0;
    ExtFileManager.fileLists = {};
    return ExtFileManager;
}());

var createUploadConfig = function (url, method, headers, uploadLabel, cleanonUpload) {
    return {
        url: url,
        method: method,
        headers: headers,
        uploadLabel: uploadLabel,
        cleanonUpload: cleanonUpload
    };
};

/**
 * A syntetic file creator.
 * Very useful for tests
 */
var SyntheticFile = /** @class */ (function () {
    function SyntheticFile() {
    }
    /**
 *
 * @param name the file name
 * @param size the file size
 * @param type the file type
 * @returns
 */
    SyntheticFile.createFile = function (name, size, type) {
        var file = new File([], name, { type: type });
        Object.defineProperty(file, "size", {
            get: function () {
                return size;
            },
        });
        return file;
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_aac = function (size) {
        return SyntheticFile.createFile("acc_audio-file-with-large-name.aac", size ? size : 3516516, "audio/aac");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_abw = function (size) {
        return SyntheticFile.createFile("abiword-file-with-large-name.abw", size ? size : 3516516, "application/x-abiword");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_freearc = function (size) {
        return SyntheticFile.createFile("freearc-file-with-large-name.arc", size ? size : 3516516, "application/x-freearc");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_avi = function (size) {
        return SyntheticFile.createFile("avi-file-with-large-name.avi", size ? size : 3516516, "video/x-msvideo");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_azw = function (size) {
        return SyntheticFile.createFile("amazon_kindle_ebook-file-with-large-name.azw", size ? size : 3516516, "application/vnd.amazon.ebook");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_octet = function (size) {
        return SyntheticFile.createFile("binary_octet_stream-file-with-large-name.bin", size ? size : 3516516, "application/octet-stream");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_bmp = function (size) {
        return SyntheticFile.createFile("bit_map-file-with-large-name.bmp", size ? size : 3516516, "image/bmp");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_bz = function (size) {
        return SyntheticFile.createFile("x_bzip-file-with-large-name.bz", size ? size : 3516516, "application/x-bzip");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_bz2 = function (size) {
        return SyntheticFile.createFile("x_bzip_2-file-with-large-name.bz2", size ? size : 3516516, "application/x-bzip2");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_cda = function (size) {
        return SyntheticFile.createFile("cd_audio-file-with-large-name.cda", size ? size : 3516516, "application/x-cdf");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_csh = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.csh", size ? size : 3516516, "application/x-csh");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_css = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.css", size ? size : 3516516, "text/css");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_csv = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.csv", size ? size : 3516516, "text/csv");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_doc = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.doc", size ? size : 3516516, "application/msword");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_docx = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.docx", size ? size : 3516516, "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_eot = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.eot", size ? size : 3516516, "application/vnd.ms-fontobject");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_epub = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.epub", size ? size : 3516516, "application/epub+zip");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_gzip = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.gz", size ? size : 3516516, "application/gzip");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_gif = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.gif", size ? size : 3516516, "image/gif");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_htm = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.htm", size ? size : 3516516, "text/html");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_html = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.html", size ? size : 3516516, "text/html");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_ico = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.ico", size ? size : 3516516, "image/vnd.microsoft.icon");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_icalendar = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.ics", size ? size : 3516516, "text/calendar");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_jar = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.jar", size ? size : 3516516, "application/java-archive");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_jpeg = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.jpeg", size ? size : 3516516, "image/jpeg");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_jpg = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.jpg", size ? size : 3516516, "image/jpeg");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_js = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.js", size ? size : 3516516, "text/javascript");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_json = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.json", size ? size : 3516516, "application/json");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_jsonld = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.jsonld", size ? size : 3516516, "application/ld+json");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_mid = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.mid", size ? size : 3516516, "audio/midi");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_x_mid = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.mid", size ? size : 3516516, "audio/x-midi");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_midi = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.midi", size ? size : 3516516, "audio/x-midi");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_x_midi = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.midi", size ? size : 3516516, "audio/x-midi");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_mjs = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.mjs", size ? size : 3516516, "text/javascript");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_mp3 = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.mp3", size ? size : 3516516, "audio/mpeg");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_mp4 = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.mp4", size ? size : 3516516, "video/mp4");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_mpeg = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.mpeg", size ? size : 3516516, "video/mpeg");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_mpkg = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.mpkg", size ? size : 3516516, "application/vnd.apple.installer+xml");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_odp = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.odp", size ? size : 3516516, "application/vnd.oasis.opendocument.presentation");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_ods = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.ods", size ? size : 3516516, "application/vnd.oasis.opendocument.spreadsheet");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_odt = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.odt", size ? size : 3516516, "application/vnd.oasis.opendocument.text");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_oga = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.oga", size ? size : 3516516, "audio/ogg");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_ogv = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.ogv", size ? size : 3516516, "video/ogg");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_ogx = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.ogx", size ? size : 3516516, "application/ogg");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_opus = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.opus", size ? size : 3516516, "audio/opus");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_otf = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.otf", size ? size : 3516516, "font/otf");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_png = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.png", size ? size : 3516516, "image/png");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_pdf = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.pdf", size ? size : 3516516, "application/pdf");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_php = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.php", size ? size : 3516516, "application/x-httpd-php");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_ppt = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.ppt", size ? size : 3516516, "application/vnd.ms-powerpoint");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_pptx = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.pptx", size ? size : 3516516, "application/vnd.openxmlformats-officedocument.presentationml.presentation");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_rar = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.rar", size ? size : 3516516, "application/vnd.rar");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_rtf = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.rtf", size ? size : 3516516, "application/rtf");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_sh = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.sh", size ? size : 3516516, "application/x-sh");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_svg = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.svg", size ? size : 3516516, "image/svg+xml");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_swf = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.swf", size ? size : 3516516, "application/x-shockwave-flash");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_tar = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.tar", size ? size : 3516516, "application/x-tar");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_tif = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.tif", size ? size : 3516516, "image/tiff");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_tiff = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.tiff", size ? size : 3516516, "image/tiff");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_ts = function (size) {
        return SyntheticFile.createFile("mp2t_video-file-with-large-name.ts", size ? size : 3516516, "video/mp2t");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_ttf = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.ttf", size ? size : 3516516, "font/ttf");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_text = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.txt", size ? size : 3516516, "text/plain");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_typescript = function (size) {
        return SyntheticFile.createFile("typescript-file-with-large-name.ts", size ? size : 3516516, "text/plain");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_vsd = function (size) {
        return SyntheticFile.createFile("ms_visio-file-with-large-name.vsd", size ? size : 3516516, "application/vnd.visio");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_wav = function (size) {
        return SyntheticFile.createFile("wav_audio-file-with-large-name.wav", size ? size : 3516516, "audio/wav");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_weba = function (size) {
        return SyntheticFile.createFile("web_audio-file-with-large-name.weba", size ? size : 3516516, "audio/webm");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_webm = function (size) {
        return SyntheticFile.createFile("web_video-file-with-large-name.webm", size ? size : 3516516, "video/webm");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_webp = function (size) {
        return SyntheticFile.createFile("web_image-file-with-large-name.webp", size ? size : 3516516, "image/webp");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_woff = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.woff", size ? size : 3516516, "font/woff");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_woff2 = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.woff2", size ? size : 3516516, "font/woff2");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_xhtml = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.xhtml", size ? size : 3516516, "application/xhtml+xml");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_xlsx = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.xls", size ? size : 3516516, "application/vnd.ms-excel");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_xls = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.xlsx", size ? size : 3516516, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_xml = function (size) {
        return SyntheticFile.createFile("xml-file-with-large-name.xml", size ? size : 3516516, "application/xml");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_xml_txt = function (size) {
        return SyntheticFile.createFile("xml_plain_text-file-with-large-name.xml", size ? size : 3516516, "application/xml");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_xul = function (size) {
        return SyntheticFile.createFile("test-file-with-large-name.xul", size ? size : 3516516, "application/vnd.mozilla.xul+xml");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_zip = function (size) {
        return SyntheticFile.createFile("zip-file-with-large-name.zip", size ? size : 3516516, "application/zip");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_3gp = function (size) {
        return SyntheticFile.createFile("3gp_video-file-with-large-name.3gp", size ? size : 3516516, "video/3gpp");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_3gp2 = function (size) {
        return SyntheticFile.createFile("3gp2_video-file-with-large-name.3g2", size ? size : 3516516, "video/3gpp2");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_3gp_a = function (size) {
        return SyntheticFile.createFile("3gp_audio-file-with-large-name.3gp", size ? size : 3516516, "audio/3gpp");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_3gp_v = function (size) {
        return SyntheticFile.createFile("3gp_audio-file-with-large-name.3gp2", size ? size : 3516516, "audio/3gpp2");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_7z = function (size) {
        return SyntheticFile.createFile("seven_zip-file-with-large-name.7z", size ? size : 3516516, "application/x-7z-compressed");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_python = function (size) {
        return SyntheticFile.createFile("python-file-with-large-name.py", size ? size : 3516516, "text/plain");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_java = function (size) {
        return SyntheticFile.createFile("java-file-with-large-name.java", size ? size : 3516516, "text/plain");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_react = function (size) {
        return SyntheticFile.createFile("react_jsx-file-with-large-name.jsx", size ? size : 3516516, "text/plain");
    };
    /**
    *
    * @param size the file size
    * @returns a syntetic File object instance
    */
    SyntheticFile.create_vue = function (size) {
        return SyntheticFile.createFile("vue-file-with-large-name.vue", size ? size : 3516516, "text/plain");
    };
    /**
     * Creates an array of fake (synthetic) files
     * @param size the file size for all synthetic files
     * @returns an array of all file icon preview supported files
     */
    SyntheticFile.createFileListMiscelanious = function (size) {
        var listFile = [];
        listFile.push(SyntheticFile.create_aac(size));
        listFile.push(SyntheticFile.create_abw(size));
        listFile.push(SyntheticFile.create_freearc(size));
        listFile.push(SyntheticFile.create_avi(size));
        listFile.push(SyntheticFile.create_azw(size));
        listFile.push(SyntheticFile.create_octet(size));
        listFile.push(SyntheticFile.create_bmp(size));
        listFile.push(SyntheticFile.create_bz(size));
        listFile.push(SyntheticFile.create_bz2(size));
        listFile.push(SyntheticFile.create_cda(size));
        listFile.push(SyntheticFile.create_csh(size));
        listFile.push(SyntheticFile.create_css(size));
        listFile.push(SyntheticFile.create_csv(size));
        listFile.push(SyntheticFile.create_doc(size));
        listFile.push(SyntheticFile.create_docx(size));
        listFile.push(SyntheticFile.create_eot(size));
        listFile.push(SyntheticFile.create_epub(size));
        listFile.push(SyntheticFile.create_gzip(size));
        listFile.push(SyntheticFile.create_gif(size));
        listFile.push(SyntheticFile.create_htm(size));
        listFile.push(SyntheticFile.create_html(size));
        listFile.push(SyntheticFile.create_ico(size));
        listFile.push(SyntheticFile.create_icalendar(size));
        listFile.push(SyntheticFile.create_jar(size));
        listFile.push(SyntheticFile.create_jpeg(size));
        listFile.push(SyntheticFile.create_jpg(size));
        listFile.push(SyntheticFile.create_js(size));
        listFile.push(SyntheticFile.create_json(size));
        listFile.push(SyntheticFile.create_jsonld(size));
        listFile.push(SyntheticFile.create_mid(size));
        listFile.push(SyntheticFile.create_midi(size));
        listFile.push(SyntheticFile.create_x_mid(size));
        listFile.push(SyntheticFile.create_x_midi(size));
        listFile.push(SyntheticFile.create_mjs(size));
        listFile.push(SyntheticFile.create_mp3(size));
        listFile.push(SyntheticFile.create_mp4(size));
        listFile.push(SyntheticFile.create_mpeg(size));
        listFile.push(SyntheticFile.create_mpkg(size));
        listFile.push(SyntheticFile.create_odp(size));
        listFile.push(SyntheticFile.create_ods(size));
        listFile.push(SyntheticFile.create_odt(size));
        listFile.push(SyntheticFile.create_oga(size));
        listFile.push(SyntheticFile.create_ogv(size));
        listFile.push(SyntheticFile.create_ogx(size));
        listFile.push(SyntheticFile.create_opus(size));
        listFile.push(SyntheticFile.create_otf(size));
        listFile.push(SyntheticFile.create_png(size));
        listFile.push(SyntheticFile.create_pdf(size));
        listFile.push(SyntheticFile.create_php(size));
        listFile.push(SyntheticFile.create_ppt(size));
        listFile.push(SyntheticFile.create_pptx(size));
        listFile.push(SyntheticFile.create_rar(size));
        listFile.push(SyntheticFile.create_rtf(size));
        listFile.push(SyntheticFile.create_sh(size));
        listFile.push(SyntheticFile.create_svg(size));
        listFile.push(SyntheticFile.create_swf(size));
        listFile.push(SyntheticFile.create_tar(size));
        listFile.push(SyntheticFile.create_tif(size));
        listFile.push(SyntheticFile.create_tiff(size));
        listFile.push(SyntheticFile.create_ts(size));
        listFile.push(SyntheticFile.create_ttf(size));
        listFile.push(SyntheticFile.create_text(size));
        listFile.push(SyntheticFile.create_typescript(size));
        listFile.push(SyntheticFile.create_vsd(size));
        listFile.push(SyntheticFile.create_wav(size));
        listFile.push(SyntheticFile.create_weba(size));
        listFile.push(SyntheticFile.create_webm(size));
        listFile.push(SyntheticFile.create_webp(size));
        listFile.push(SyntheticFile.create_woff(size));
        listFile.push(SyntheticFile.create_woff2(size));
        listFile.push(SyntheticFile.create_xhtml(size));
        listFile.push(SyntheticFile.create_xlsx(size));
        listFile.push(SyntheticFile.create_xls(size));
        listFile.push(SyntheticFile.create_xml(size));
        listFile.push(SyntheticFile.create_xml_txt(size));
        listFile.push(SyntheticFile.create_xul(size));
        listFile.push(SyntheticFile.create_zip(size));
        //listFile.push(SyntheticFile.create_3gp(size));
        //listFile.push(SyntheticFile.create_3gp2(size));
        //listFile.push(SyntheticFile.create_3gp_a(size));
        //listFile.push(SyntheticFile.create_3gp_v(size));
        //listFile.push(SyntheticFile.create_7z(size));
        listFile.push(SyntheticFile.create_python(size));
        listFile.push(SyntheticFile.create_java(size));
        listFile.push(SyntheticFile.create_react(size));
        listFile.push(SyntheticFile.create_vue(size));
        return listFile;
    };
    return SyntheticFile;
}());
///////////////////// SHORTCUTS
/**
 * Create a list of synthetic files with different mime types
 * @param size the file size for each synthetic file
 * @returns a list of synthetic file
 */
var createListOfMultiTypeFile = function (size) {
    return SyntheticFile.createFileListMiscelanious(size);
};
/**
 * Creates a synthetic file.
 * By default, creates a png image file
 * @param name the file name to show. By default is set to "png-image-file-with-large-name.png"
 * @param size the size in bytes of the file. By default this value is set to 455555
 * @param type the mime type of the file. By default is set to "image/png"
 * @returns
 */
var createSyntheticFile = function (name, size, type) {
    if (name === void 0) { name = "png-image-file-with-large-name.png"; }
    if (size === void 0) { size = 455555; }
    if (type === void 0) { type = "image/png"; }
    return SyntheticFile.createFile(name, size, type);
};

/**
 * An id generator for FileItems
 */
var FileIdGenerator = /** @class */ (function () {
    function FileIdGenerator() {
    }
    /**
     * Increases the id counter and returns the next id available.
     * @returns the next integer id available
     */
    FileIdGenerator.getNextId = function () {
        FileIdGenerator.nextId++;
        return FileIdGenerator.nextId;
    };
    FileIdGenerator.nextId = 0;
    return FileIdGenerator;
}());

/**
 * Converts the fileList into an array of separated ExtFile objects
 * @param fileList the FileList object given by input(event.target.files) or drop operation (event.dataTransfer)
 * @returns an array of ExtFile objects
 */
var fileListToExtFileArray = function (fileList) {
    var extFileArray = [];
    for (var i = 0, f = void 0; (f = fileList[i]); i++) {
        extFileArray.push({ id: FileIdGenerator.getNextId(), file: f, name: f.name, size: f.size, type: f.type });
    }
    return extFileArray;
};
/**
 * Converts the fileList into an array of separated ExtFile instances
 * @param fileList the FileList object given by input (event.target.files) or drop operation (event.dataTransfer)
 * @returns an array of ExtFile instances
 */
var fileListToExtFileInstanceArray = function (fileList) {
    var extFileArray = [];
    for (var i = 0, f = void 0; (f = fileList[i]); i++) {
        extFileArray.push(new ExtFileInstance({ id: FileIdGenerator.getNextId(), file: f, name: f.name, size: f.size, type: f.type }));
    }
    return extFileArray;
};

var isValidateActive = function (accept, maxFileSize, maxFiles, validator) {
    return ((accept !== undefined && accept !== null) ||
        (maxFileSize !== undefined && maxFileSize !== null) ||
        (maxFiles !== undefined && maxFiles !== null) ||
        (validator !== undefined && validator !== null));
};

/**
 * The max size of the word in characters
 */
var DEFAULT_MAX_SIZE_WORD = 30;
/**
 *
 * @param word the word to be shrinked
 * @returns the shrinked word
 */
var shrinkWord = function (word, card) {
    if (word === void 0) { word = ""; }
    if (card === void 0) { card = false; }
    var newWord = word;
    if (card) {
        if (word.length >= 20) {
            newWord = word.slice(0, 10) + "..." + word.slice(-7);
        }
    }
    else if (word.length >= DEFAULT_MAX_SIZE_WORD) {
        newWord = word.slice(0, 13) + "..." + word.slice(-8);
    }
    return newWord;
};

/**
 * Updates a extFile and sets its uploadStatus to "uploading"
 * @param extFile the extended file object
 * @returns the extended file with the uploadStatus attribute modified
 */
var setPrepToUploading = function (extFile) {
    //console.log("prepToUpload One", extFile);
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            resolve(__assign(__assign({}, extFile), { uploadStatus: "uploading" }));
        }, 1500);
    });
};
/**
 * Updates a extFile and sets its uploadStatus to "success"
 * @param extFile the extended file object
 * @returns the extended file with the uploadStatus attribute modified
 */
var uploadOne = function (extFile) {
    //console.log("upload One", extFile);
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            resolve(__assign(__assign({}, extFile), { uploadStatus: "success" }));
        }, 2000);
    });
};
/**
 * Awaits the given time before start uploading
 * @param preparingTime the time in miliseconds, by default it will wait 1.5 secs
 * @returns an empty object
 */
var sleepPreparing = function (preparingTime) {
    if (preparingTime === void 0) { preparingTime = 5000; }
    //console.log("uploadfiles preparingTime One", preparingTime);
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            resolve();
        }, preparingTime);
    });
};
/**
 *
 * @param extFileInstance
 * @returns
 */
var prepToUploadOne = function (extFileInstance) {
    //console.log("prepToUpload One", extFileInstance);
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            extFileInstance.uploadStatus = "uploading";
            resolve(__assign(__assign({}, extFileInstance), { uploadStatus: "uploading" }));
        }, 1500);
    });
};
/**
 *
 * @param extFileInstance
 * @returns
 */
var uploadOneExtFile = function (extFileInstance) {
    //console.log("upload One", extFileInstance);
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            extFileInstance.uploadStatus = "success";
            resolve(__assign(__assign({}, extFileInstance), { uploadStatus: "success" }));
        }, 2000);
    });
};
/**
 *
 * @param extFile the extFile to upload
 * @param DropzoneLocalizer the localization
 * @returns a duiUploadResponse object that describes the result
 */
var fakeFuiUpload = function (extFileInstance, DropzoneLocalizer) {
    if (DropzoneLocalizer === void 0) { DropzoneLocalizer = DropzoneLocalizerSelector("EN-en"); }
    var extFile = extFileInstance.toExtFile();
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            var randomNumber = Math.floor(Math.random() * 10);
            if (randomNumber % 2 === 0) {
                var success = true;
                var message = DropzoneLocalizer.fakeuploadsuccess;
                var payload = { url: "" };
                resolve(__assign(__assign({}, extFile), { serverResponse: { success: success, message: message, payload: payload }, uploadStatus: "success", uploadMessage: message }));
            }
            else {
                var success = false;
                var message = DropzoneLocalizer.fakeUploadError;
                var payload = {};
                resolve(__assign(__assign({}, extFile), { serverResponse: { success: success, message: message, payload: payload }, uploadStatus: "error", uploadMessage: message }));
            }
        }, 1700);
    });
};

/**
 * Random integer between min (included) and max (excluded)
 * @param min the min number
 * @param max the max number
 * @returns a random number between min (included) and max (excluded)
 */
function getRandomInt(min, max) {
    if (min === void 0) { min = 0; }
    if (max === void 0) { max = 0; }
    return Math.floor(Math.random() * (max - min)) + min;
}

/**
 * Cleans the input.value attribute
 * @param inputElement
 */
var cleanInput = function (inputElement) {
    if (!inputElement)
        return;
    inputElement.value = "";
};

/**
 * If className is given, adds class name in string format to a base class name
 * @param baseClassName the base class name
 * @param className the class name to be added
 * @returns a new class name obtained by adding the second paramater
 */
var addClassName = function (baseClassName, className) {
    if (className)
        return "".concat(baseClassName, " ").concat(className);
    return baseClassName;
};

var isUploadAbleExtFile = function (extFile, validateFilesFlag) {
    return (!validateFilesFlag || (validateFilesFlag && extFile.valid)) && extFile.uploadStatus !== "success";
};

/**
 *
 * @param file
 * @param name
 * @param type
 * @param size
 * @returns the file name, type and size
 */
var getLocalFileItemData = function (file, name, type, size) {
    var localFileName = "";
    var localFileType = undefined;
    var localFileSize = undefined;
    // if file object is valid, obtain metadata from it
    // otherwise try to get file data from individual props in string format
    if (file && typeof file.name === "string") {
        localFileName = file.name;
        localFileType = file.type;
        localFileSize = file.size;
    }
    else if (name && typeof name === "string") {
        localFileName = name;
        localFileType = type;
        localFileSize = size;
    }
    return [localFileName, localFileType, localFileSize];
};

/**
 * Separate the accept string array into an array of strings separated by commas
 * @param accept the string accept array
 * @returns an array of strings in wich every item
 */
var separateAccept = function (accept) {
    if (!accept || accept.length === 0) {
        return [];
    }
    var commaSeparatedAccpet = accept.split(",").map(function (acceptItem) { return acceptItem.trim(); });
    return commaSeparatedAccpet;
};

/**
 * Checks whether a file is valid or not given an array of file extentions and mime types
 * e.g. accept =  [".doc", ".docx", ".xml", "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"]
 * @param accept the array of strings accept items
 * @param file a File object to be evaluated
 * @returns true if the mime type file is included in the accept param
 */
var validateAccept = function (accept, file) {
    var valid = false;
    var name = file.name, type = file.type;
    //Array(5) [ ".doc", ".docx", ".xml", "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document" ]
    for (var i = 0; i < accept.length; i++) {
        var acceptItem = accept[i];
        //check is not empty
        if (acceptItem.length !== 0) {
            //check extention
            if (acceptItem.charAt(0) === ".") {
                if (acceptItem.includes(getExt(name))) {
                    return true;
                }
            }
            //check mime
            // header/tail  => image/png  ;  image/* ; audio
            if (type && type.length > 0 && acceptItem.includes("/") && type.includes("/")) {
                var headerMime = acceptItem.split("/")[0];
                var tailMime = acceptItem.split("/")[1];
                var headerMimeFile = type.split("/")[0];
                var tailMimeFile = type.split("/")[1];
                if (headerMime === headerMimeFile) {
                    //    image/*
                    if (tailMime === "*") {
                        return true;
                    }
                    else if (tailMime === tailMimeFile) {
                        return true;
                    }
                }
            }
        }
    }
    return valid;
};

/**
 *
 * @param preValidatedFiles FileList
 * @param remainingValids The number of remaining valid files
 * @param localValidator
 * @param validator
 * @param maxFiles
 * @param localization
 * @returns
 */
var fileListvalidator = function (preValidatedFiles, remainingValids, localValidator, validator, maxFiles, localization) {
    var output = [];
    //set a countdown when there is a limit on files
    var countdown = remainingValids;
    // get localized labels
    var ValidationErrorLocalizer = ValidateErrorLocalizerSelector(localization);
    //Iterate the File list
    for (var i = 0, f = void 0; (f = preValidatedFiles[i]); i++) {
        // Validate the file list with
        var validatedFile = validateFile(f, validator, localValidator, ValidationErrorLocalizer);
        if (validatedFile.valid) {
            //not valid due to file count limit
            var valid = countdown > 0;
            validatedFile.valid = valid;
            //add error about amount
            if (!valid) {
                var maxFileErrorMessenger = ValidationErrorLocalizer.maxFileCount;
                validatedFile.errors = validatedFile.errors
                    ? __spreadArray(__spreadArray([], validatedFile.errors, true), [maxFileErrorMessenger(maxFiles || Infinity)], false) : [maxFileErrorMessenger(maxFiles || Infinity)];
            }
            countdown--;
        }
        output.push(validatedFile);
    }
    return output;
};
/**
 * For each ExtFile sets the valid prop of ExtFile to "true" or "false"
 * depending on the result of the individual validation.
 * It also add the list of errors.
 * @param extFileList
 * @param remainingValids
 * @param localValidatorProps
 * @param validator
 * @param maxFiles
 * @param localization
 * @returns a new ExtFile list with each item validated
 */
var validateExtFileList = function (extFileList, remainingValids, localValidatorProps, validator, maxFiles, localization) {
    //console.log("remaning valids", remainingValids);
    var fileListResult = [];
    if (!remainingValids)
        return fileListResult;
    var remaining = remainingValids;
    var ValidationErrorLocalizer = ValidateErrorLocalizerSelector(localization);
    var maxFileErrorMessenger = ValidationErrorLocalizer.maxFileCount;
    for (var i = 0; i < extFileList.length; i++) {
        var currentExtFile = extFileList[i];
        currentExtFile = validateExtFile(currentExtFile, validator, localValidatorProps, ValidationErrorLocalizer);
        //console.log("validateExtFileList after validation", currentExtFile);
        if (currentExtFile.valid) {
            //not valid due to file count limit
            var valid = remaining > 0;
            currentExtFile.valid = valid;
            //add error about amount
            if (!valid) {
                currentExtFile.errors = currentExtFile.errors
                    ? __spreadArray(__spreadArray([], currentExtFile.errors, true), [maxFileErrorMessenger(maxFiles || Infinity)], false) : [maxFileErrorMessenger(maxFiles || Infinity)];
            }
            remaining--;
        }
        fileListResult.push(currentExtFile);
    }
    return fileListResult;
};
/**
 *
 * @param extFile
 * @param validator
 * @param validatorProps
 * @param localErrors
 * @returns
 */
var validateExtFile = function (extFile, validator, validatorProps, localErrors) {
    var extFileResult = __assign({}, extFile);
    var errors = [];
    //TO-DO: Add extra validation for individual props even if FIle object was not given
    if (!extFile.file) {
        return __assign({}, extFileResult);
    }
    //TO-DO: add "overrideValidation" prop to ignore the rest of validators like accept and maxFileSize
    if (validator) {
        var resultCustomValidation = validator(extFileResult.file);
        var errorsResult = resultCustomValidation.errors;
        if (errorsResult)
            errors.push.apply(errors, errorsResult);
        //return { ...extFileResult, ...validator(extFileResult.file as File) };
    }
    var maxFileSize = validatorProps.maxFileSize, accept = validatorProps.accept;
    //console.log("Validation", maxFileSize, accept);
    //check file size
    var file = extFile.file;
    if (maxFileSize && file.size > maxFileSize) {
        var maxFileSizeErrorMessenger = localErrors.maxSizeError;
        //console.log("Size error", maxFileSizeErrorMessenger(maxFileSize));
        errors.push(maxFileSizeErrorMessenger(maxFileSize));
    }
    //check file type
    if (accept && !validateAccept(separateAccept(accept), file)) {
        errors.push(localErrors.acceptError);
    }
    var isValid = errors.length === 0;
    extFileResult = __assign(__assign({}, extFileResult), { valid: isValid, errors: !isValid ? errors : undefined });
    //console.log("validation extFileResult", extFileResult);
    return extFileResult;
};
/**
 * Function that validate whether a file is valid, or not
 * according to the Filevalidator properties
 * @param file a File object to be evaluated
 * @param validatorProps the validator object
 * @returns a FileValidated object
 */
var validateFile = function (file, validator, validatorProps, localErrors) {
    var idGenerated = FileIdGenerator.getNextId();
    var errors = [];
    if (validator) {
        return __assign({ id: idGenerated, file: file }, validator(file));
    }
    var maxFileSize = validatorProps.maxFileSize, accept = validatorProps.accept;
    //check file size
    if (maxFileSize && file.size > maxFileSize) {
        var maxFileSizeErrorMessenger = localErrors.maxSizeError;
        errors.push(maxFileSizeErrorMessenger(maxFileSize));
    }
    //check file type
    // const allowedTypes = accept.filter((type) => (file.type === type))
    if (accept && !validateAccept(separateAccept(accept), file)) {
        errors.push(localErrors.acceptError);
    }
    var fileResult = {
        id: idGenerated,
        file: file,
        valid: errors.length === 0,
        errors: errors
    };
    // logic here
    return fileResult;
};

/**
 * Generates a random number betwen 0 and 3
 * where
 * 0 => error
 * 1 => uploading
 * 2 => success
 * 3 => undefined
 * @returns a random upload status or undefined
 */
var getRandomUploadStatus = function () {
    var result = getRandomInt(0, 4);
    switch (result) {
        case 0: return "error";
        case 1: return "uploading";
        case 2: return "success";
        default:
            return undefined;
    }
};

/**
 * list of dumy errors in english
 */
var listOfErrors = [
    "File is too big. Max file size allowed is 80mb.",
    "File's type is not allowed.",
    "Max amount of files (28) has been reached."
];

/**
 * Make a validated file that is ready to be used on FileItem component,
 * if valid is not set, a random operation will decide whether the file is valid or not
 * If valid is false, then the natural order is not to be uploadable and wont have upload message nor upload status
 * If valid is true, then file can be uploaded and can have upload message if the status is succes or error
 * @param file The file
 * @param valid true if it is a valid file, otherwise is false
 * @param uploadStatus the current upload status. If not given a random upload status will be set
 * @param uploadMessage the upload message after uploading
 * @returns a Vaidated File object
 */
var makeSyntheticExtFile = function (file, valid, uploadStatus, uploadMessage) {
    if (valid === void 0) { valid = (Math.ceil(Math.random() * 28) % 2 === 0); }
    //if valid, naturally, can be uploaded
    var errors = [];
    var newUpoadStatus = uploadStatus || getRandomUploadStatus();
    var customUploadMessage = uploadMessage || "";
    if (valid) {
        //we can decide according to upload status 
        if (!uploadMessage) {
            switch (newUpoadStatus) {
                case "error":
                    customUploadMessage = "Upload failed. There was an error";
                    break;
                case "success":
                    customUploadMessage = "File was successfully upload";
                    break;
                default: uploadMessage = undefined;
            }
        }
        errors = undefined;
    }
    else {
        //if not valid, just show error messages
        var randInt = getRandomInt(0, 3);
        errors.push(listOfErrors[randInt]);
        newUpoadStatus = undefined;
        customUploadMessage = undefined;
    }
    //now make a File Validated instance 
    var newFileValidated = {
        id: FileIdGenerator.getNextId(),
        valid: valid,
        file: file,
        uploadStatus: newUpoadStatus,
        uploadMessage: customUploadMessage,
        errors: errors
    };
    return newFileValidated;
};

var extFileMock = function (id) {
    return {
        id: id || FileIdGenerator.getNextId(),
        name: "fileName.ext",
        size: 28 * 1024 * 1024,
        type: "files-ui/mock",
        file: createSyntheticFile("fileName.ext", 28 * 1024 * 1024, "files-ui/mock"),
        errors: listOfErrors,
        uploadMessage: "uploaded",
        uploadStatus: "preparing",
        valid: false,
        progress: 28,
        xhr: new XMLHttpRequest(),
        extraData: {
            extraData1: "files-ui is the best",
            extraData2: {
                id: 1,
                name: "files-ui.mock"
            },
            deleted: true
        },
        downloadUrl: "https://www.files-ui.com/mock/file-download",
        uploadUrl: "https://www.files-ui.com/mock/file"
    };
};

function addExtraData(formData, extraData) {
    //headers
    var extraDataKeys = Object.keys(extraData || {});
    //const headerValues: string[] = Object.values(headers);
    for (var i = 0; i < extraDataKeys.length && extraData; i++) {
        //console.log("uploadFile extraData", extraDataKeys[i], extraData[extraDataKeys[i]]);
        formData.append(extraDataKeys[i], extraData[extraDataKeys[i]]);
    }
    // formData.append("otherValue", "HAAAAAAAAAAAAAAa");
}

function addHeaders(xhr, headers) {
    //headers
    var headerKeys = Object.keys(headers || {});
    //const headerValues: string[] = Object.values(headers);
    for (var i = 0; i < headerKeys.length && headers; i++) {
        //console.log("uploadFile headers", headerKeys[i], headers[headerKeys[i]]);
        xhr.setRequestHeader(headerKeys[i], headers[headerKeys[i]]);
    }
}

var NO_URL_MESSAGE = "Unable to upload. A valid url was not provided";
var NO_XHR_MESSAGE = "Unable to upload. xhr object was not provided";

var TIMEOUT_ERROR_RESPONSE = {
    success: false,
    message: "Timeout error",
    payload: {}
};
var ABORTED_ERROR_RESPONSE = {
    success: false,
    message: "Upload aborted",
    payload: {}
};
var JSON_PARSE_ERROR_RESPONSE = {
    success: false,
    message: "Error when parsing JSON response",
    payload: {}
};
var UNEXPECTED_ERROR_RESPONSE = {
    success: false,
    message: "Unexpected error",
    payload: {}
};
var NO_XHR_PROVIDED_ERROR = function (extFile) {
    return __assign(__assign({}, extFile), { uploadMessage: NO_XHR_MESSAGE, uploadStatus: "error", serverResponse: { success: false, } });
};
var NO_URL_PROVIDED_ERROR = function (extFile) {
    return __assign(__assign({}, extFile), { uploadMessage: NO_URL_MESSAGE, uploadStatus: "error", serverResponse: { success: false, } });
};

var makeServerResponse = function (success, message, payload) {
    var result = { success: success, message: message, payload: payload };
    return result;
};
var JsonParseResponse = function (xhr) {
    try {
        var jsonResponse = JSON.parse(xhr.response);
        var success = (xhr.status >= 200 && xhr.status < 300) ? true : typeof jsonResponse.success === "boolean" ? jsonResponse.success : false;
        var message = typeof jsonResponse.message === "string" ? jsonResponse.message :
            success ?
                "Upload compete!. No message from server found."
                : "Error on upload. No message from server found.";
        var payload = jsonResponse.payload || jsonResponse || {};
        var fuiResponse = {
            success: success,
            message: message,
            payload: payload
        };
        return fuiResponse;
    }
    catch (error) {
        //console.log("FuiUpload ERROR", error);
        return JSON_PARSE_ERROR_RESPONSE;
    }
};
var makeSuccessUploadResponse = function (extFile, responseFui) {
    return __assign(__assign({}, extFile), { serverResponse: responseFui, uploadMessage: responseFui.message, uploadStatus: "success" });
};
var makeErrorUploadResponse = function (extFile, responseFui) {
    //console.log("makeErrorUploadResponse", extFile, responseFui);
    return __assign(__assign({}, extFile), { uploadMessage: responseFui.message, uploadStatus: "error", serverResponse: responseFui });
};

/**
 * Uploads one formData object to a given endpoint in a promisified way
 * @param xhr XMLHTTPrequest object
 * @param method method for uploading
 * @param endpoint endpoint to upload the file
 * @param data FromData object to perform multipart form data upload
 * @param headers the set of headers
 * @returns a server response that consists on {status, payload, message}
 */
var uploadBlob = function (xhr, method, endpoint, data, headers) {
    if (method === void 0) { method = "POST"; }
    return new Promise(function (resolve, reject) {
        //console.log("Fui_uploadFormData uploadFile", xhr, method, endpoint, data, headers);
        console.log("uploadBlob => BLOB");
        var finalMethod = ["POST", "PUT", "PATCH"].includes(method.toUpperCase()) ? method : "POST";
        xhr.upload.onload = function () {
            //console.log("Fui_uploadFormData uploadFile onLoad", xhr.readyState, xhr.response);
        };
        xhr.upload.ontimeout = function () { return resolve(TIMEOUT_ERROR_RESPONSE); };
        xhr.upload.onabort = function () {
            //console.log("Fui_uploadFormData ABORTEEEEDDDD");
            resolve(ABORTED_ERROR_RESPONSE);
        };
        xhr.onloadend = function (e) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        }); };
        // listen for `progress` event
        //currently listening on FileItem component hook
        xhr.onreadystatechange = function (e) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                //console.log("Finished", xhr);
                //console.log("Fui_uploadFormData uploadFile onreadystatechange e.type", e.type);
                //console.log("Fui_uploadFormData uploadFile onreadystatechange", xhr.readyState, xhr.response);
                //lastLastState = lastState;
                //lastState = xhr.readyState;
                if (xhr.readyState === 4) {
                    if (xhr.response !== "") {
                        //there is th answer
                        resolve(JsonParseResponse(xhr));
                    }
                    else {
                        //error unexpected
                        resolve(ABORTED_ERROR_RESPONSE);
                    }
                } //else {
                return [2 /*return*/];
            });
        }); };
        // open request
        xhr.open(finalMethod, endpoint, true);
        //add header to request
        addHeaders(xhr, headers);
        //start uploading
        //const blob:Blob = new Blob(data., { type: "text/plain" });
        xhr.send(data);
    });
};
/**
 * Uploads one formData object to a given endpoint in a promisified way
 * @param xhr XMLHTTPrequest object
 * @param method method for uploading
 * @param endpoint endpoint to upload the file
 * @param data FromData object to perform multipart form data upload
 * @param headers the set of headers
 * @returns a server response that consists on {status, payload, message}
 */
var uploadFormData = function (xhr, method, endpoint, data, headers) {
    if (method === void 0) { method = "POST"; }
    return new Promise(function (resolve, reject) {
        //console.log("Fui_uploadFormData uploadFile", xhr, method, endpoint, data, headers);
        var finalMethod = ["POST", "PUT", "PATCH"].includes(method.toUpperCase()) ? method : "POST";
        /*   let lastLastState: number = -1;
          let lastState: number = 0;
          let jumped: boolean = false; */
        xhr.upload.onload = function () {
            //console.log("Fui_uploadFormData uploadFile onLoad", xhr.readyState, xhr.response);
        };
        xhr.upload.ontimeout = function () { return resolve(TIMEOUT_ERROR_RESPONSE); };
        xhr.upload.onabort = function () {
            //console.log("Fui_uploadFormData ABORTEEEEDDDD");
            resolve(ABORTED_ERROR_RESPONSE);
        };
        xhr.onloadend = function (e) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        }); };
        // listen for `progress` event
        //currently listening on FileItem component hook
        xhr.onreadystatechange = function (e) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                //console.log("Finished", xhr);
                //console.log("Fui_uploadFormData uploadFile onreadystatechange e.type", e.type);
                //console.log("Fui_uploadFormData uploadFile onreadystatechange", xhr.readyState, xhr.response);
                //lastLastState = lastState;
                //lastState = xhr.readyState;
                if (xhr.readyState === 4) {
                    if (xhr.response !== "") {
                        //there is th answer
                        resolve(JsonParseResponse(xhr));
                    }
                    else {
                        //error unexpected
                        // console.log("Fui_uploadFormData EMPTY status", xhr.status);
                        // console.log("Fui_uploadFormData EMPTY readyState", xhr.readyState);
                        // console.log("Fui_uploadFormData EMPTY upload", xhr.upload);
                        //console.log("Fui_uploadFormData EMPTY abort", xhr.abort);
                        //const jumped = lastLastState - lastLastState !== 1;
                        resolve(ABORTED_ERROR_RESPONSE);
                    }
                }
                return [2 /*return*/];
            });
        }); };
        // open request
        xhr.open(finalMethod, endpoint, true);
        //add header to request
        addHeaders(xhr, headers);
        //start uploading
        xhr.send(data);
    });
};
/**
 * Method that perfomrs the upload operation for an ExtFIle
 * @param file the extended file to be uploaded
 * @param url the endpoint
 * @param urlFromExtFile a function to generate the url for each ExtFile
 * @param method the method for uploading
 * @param headers headers for request
 * @param asBlob if true, it wil upload file as blob instead of uploadint it as FormData.
 * @returns The extFile with upload values modified
 */
var uploadExtFile = function (extFile, url, urlFromExtFile, method, headers, uploadLabel, asBlob) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(void 0, void 0, void 0, function () {
                var uploader, finalUrl, localMethod, fileToUpload, formData, finalExtraData, responseFui;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 5, , 6]);
                            uploader = extFile.xhr;
                            if (!uploader) {
                                resolve(NO_XHR_PROVIDED_ERROR(extFile));
                                return [2 /*return*/];
                            }
                            finalUrl = extFile.uploadUrl || (urlFromExtFile === null || urlFromExtFile === void 0 ? void 0 : urlFromExtFile(extFile)) || url;
                            if (finalUrl == undefined || finalUrl.length == 0) {
                                resolve(NO_URL_PROVIDED_ERROR(extFile));
                                return [2 /*return*/];
                            }
                            localMethod = method || "POST";
                            fileToUpload = extFile.file;
                            formData = new FormData();
                            formData.append(uploadLabel || "file", fileToUpload);
                            finalExtraData = __assign({}, extFile.extraUploadData);
                            addExtraData(formData, finalExtraData);
                            responseFui = void 0;
                            if (!asBlob) return [3 /*break*/, 2];
                            return [4 /*yield*/, uploadBlob(uploader, localMethod, finalUrl, fileToUpload, headers || {})];
                        case 1:
                            responseFui = _a.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, uploadFormData(uploader, localMethod, finalUrl, formData, headers || {})];
                        case 3:
                            responseFui = _a.sent();
                            _a.label = 4;
                        case 4:
                            if (responseFui.success) {
                                // status is true
                                resolve(makeSuccessUploadResponse(extFile, responseFui));
                            }
                            else {
                                // status is false
                                resolve(makeErrorUploadResponse(extFile, responseFui));
                            }
                            return [3 /*break*/, 6];
                        case 5:
                            _a.sent();
                            // on error
                            //console.log("uploadPromiseXHR uploadPromiseXHR ERROR", error);
                            resolve(makeErrorUploadResponse(extFile, UNEXPECTED_ERROR_RESPONSE));
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            }); })];
    });
}); };
function uploadFile(file, url, method, label, headers) {
    var _this = this;
    return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
        var formData, serverResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    formData = new FormData();
                    formData.append(label || "file", file);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, uploadFormData(new XMLHttpRequest(), method, url, formData, headers)];
                case 2:
                    serverResponse = _a.sent();
                    resolve(serverResponse);
                    return [3 /*break*/, 4];
                case 3:
                    _a.sent();
                    // on error
                    //console.log("uploadPromiseXHR uploadPromiseXHR ERROR", error);
                    resolve(UNEXPECTED_ERROR_RESPONSE);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
}
/**
 * @deprecated
 * Uploads one formData object to a given endpoint in a promisified way
 * @param xhr XMLHTTPrequest object
 * @param method method for uploading
 * @param endpoint endpoint to upload the file
 * @param data FromData object to perform multipart form data
 * @param headers the set of headers
 * @returns a dui server response that consists on {success, payload, message}
 */
var FuiUpload = function (xhr, method, endpoint, data, headers) {
    return new Promise(function (resolve, reject) {
        //console.log("FuiUpload params", xhr, method, endpoint, data, headers);
        xhr.upload.onload = function () {
            //console.log("FuiUpload onLoad", xhr.readyState, xhr.response);
        };
        xhr.upload.ontimeout = function () { return resolve(TIMEOUT_ERROR_RESPONSE); };
        xhr.upload.onabort = function () { return resolve(ABORTED_ERROR_RESPONSE); };
        // listen for `progress` event
        //currently listening on FileMosaic component hook
        xhr.onreadystatechange = function (e) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                //console.log("Finished", xhr);
                //console.log("FuiUpload onreadystatechange", xhr.readyState, xhr.response, xhr);
                if (xhr.readyState === 4) {
                    if (xhr.response !== "") {
                        //there is th answer
                        resolve(JsonParseResponse(xhr));
                    }
                    else {
                        //error unexpected
                        resolve(UNEXPECTED_ERROR_RESPONSE);
                    }
                }
                return [2 /*return*/];
            });
        }); };
        // open request
        xhr.open(method, endpoint, true);
        var headerKeys = Object.keys(headers);
        //const headerValues: string[] = Object.values(headers);
        for (var i = 0; i < headerKeys.length; i++) {
            //console.log("FuiUpload  headers", headerKeys[i], headers[headerKeys[i]]);
            xhr.setRequestHeader(headerKeys[i], headers[headerKeys[i]]);
        }
        //start uploading
        xhr.send(data);
    });
};

var unexpectedErrorUploadResult = function (extFile) {
    return __assign(__assign({}, extFile), { uploadMessage: "Unexpected error", uploadStatus: "error", serverResponse: {
            success: false,
            message: "Error on upload: unexpected error ",
            payload: {},
        } });
};
var unableToUploadResult = function (extFile) {
    return {
        id: extFile.id,
        uploadedFile: __assign(__assign({}, extFile), { uploadMessage: "Unable to upload. XHR was not provided", uploadStatus: "error" }),
        serverResponse: {
            success: false,
            message: "Error on upload: Unable to upload. XHR was not provided ",
            payload: {},
        }
    };
};
var completeUploadResult = function (extFile, serverResponse, uploadStatusresult) {
    return {
        id: extFile.id,
        uploadedFile: __assign(__assign({}, extFile), { uploadMessage: serverResponse.message, uploadStatus: uploadStatusresult }),
        serverResponse: serverResponse
    };
};
/**
 * Initializes the xhr attribute for performing uploads
 * @param extFileList the list of extended files
 * @returns the array of extFiles with the xhr attribute initialized
 */
var toUploadableExtFileList = function (extFileList) {
    if (!extFileList)
        return [];
    return extFileList.map(function (extFile) {
        return __assign(__assign({}, extFile), { xhr: new XMLHttpRequest() });
    });
};
/**
 * Updates the uploadStatus of the given extFile
 * from "preparing" to "uploading"
 * @param extFile the extended file
 * @returns the extended file with uploadStatus updated to "uploading"
 */
var instantPreparingToUploadOne = function (extFile) {
    if (extFile.uploadStatus === "preparing") {
        //for ExtFile instance
        extFile.uploadStatus = "uploading";
        //for ExtFile type
        return __assign(__assign({}, extFile), { uploadStatus: "uploading" });
    }
    return extFile;
};
/**
 * If current uploadStatus is "preparing" it changes it to "uploading".
 * Otherwise it will return the exact same input.
 * @param extFile the extended file
 * @returns the extFile with the upload status changed
 */
var preparingToUploadOne = function (extFile) {
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            if (extFile.uploadStatus === "preparing") {
                //for ExtFile instance
                extFile.uploadStatus = "uploading";
                //for ExtFile type
                resolve(__assign(__assign({}, extFile), { uploadStatus: "uploading" }));
            }
            else
                resolve(extFile);
        }, 1500);
    });
};
/**
 * Sleeps for 1200 miliseconds for showing a better transition
 * on uploading
 * @param time the time to sleep in miliseconds
 * @returns true is everything is ok
 */
var sleepTransition = function (time) {
    if (time === void 0) { time = 1500; }
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            resolve(true);
        }, time);
    });
};
/**
 * Removes the deleted files and updates the aborted ones with a message
 * @param arrExtFile incomming arr of extFle instances
 * @returns an array of ExtFle objects
 */
var sanitizeArrExtFile = function (arrExtFile) {
    return arrExtFile.filter(function (extFileInstance) { var _a; return !((_a = extFileInstance.extraData) === null || _a === void 0 ? void 0 : _a.deleted); })
        .map(function (extFileInstance) {
        if (extFileInstance.uploadStatus === "aborted"
            && !extFileInstance.uploadMessage) {
            // TO-DO: ad localization for this message
            extFileInstance.uploadMessage = "Upload aborted by user";
            //extFileInstance.uploadStatus = "error";
        }
        return ExtFileInstance.toExtFile(extFileInstance);
    });
};
/**
 *
 * @param extFileInstance
 * @param extFileobj
 */
var setNextUploadStatus = function (extFileInstance, extFileobj) {
    var prevStatus = extFileInstance.uploadStatus;
    var nextStstaus = extFileobj.uploadStatus;
    //console.log("setNextUploadStatus", prevStatus, nextStstaus);
    //console.log("setNextUploadStatus", extFileInstance.uploadMessage, extFileobj.uploadMessage);
    if (prevStatus === "preparing" &&
        ["aborted", undefined].includes(nextStstaus)) {
        extFileInstance.uploadStatus = undefined;
        extFileInstance.uploadMessage = extFileobj.uploadMessage;
    }
    else if (prevStatus === "uploading" &&
        ["aborted", undefined].includes(nextStstaus)) {
        extFileInstance.uploadStatus = "aborted";
        extFileInstance.uploadMessage = extFileobj.uploadMessage;
    }
};

/**
 * The full list of named Colors provided by
 * https://htmlcolorcodes.com/es/nombres-de-los-colores/
 */
var NAMED_COLORS = {
    //RED
    indianred: "#CD5C5C",
    lightcoral: "#F08080",
    salmon: "#FA8072",
    darksalmon: "#E9967A",
    lightsalmon: "#FFA07A",
    crimson: "#DC143C",
    red: "#FF0000",
    firebrick: "#B22222",
    darkred: "#8B0000",
    //PINK
    pink: "#FFC0CB",
    lightpink: "#FFB6C1",
    hotpink: "#FF69B4",
    deeppink: "#FF1493",
    mediumvioletred: "#C71585",
    palevioletred: "#DB7093",
    //ORANGE
    //"lightsalmon: "#FFA07A",
    coral: "#FF7F50",
    tomato: "#FF6347",
    orangered: "#FF4500",
    darkorange: "#FF8C00",
    orange: "#FFA500",
    //YELLOW
    gold: "#FFD700",
    yellow: "#FFFF00",
    lightyellow: "#FFFFE0",
    lemonchiffon: "#FFFACD",
    lightgoldenrodyellow: "#FAFAD2",
    papayawhip: "#FFEFD5",
    moccasin: "#FFE4B5",
    peachpuff: "#FFDAB9",
    palegoldenrod: "#EEE8AA",
    khaki: "#F0E68C",
    darkkhaki: "#BDB76B",
    //PURPLE
    lavender: "#E6E6FA",
    thistle: "#D8BFD8",
    plum: "#DDA0DD",
    violet: "#EE82EE",
    orchid: "#DA70D6",
    fuchsia: "#FF00FF",
    magenta: "#FF00FF",
    mediumorchid: "#BA55D3",
    mediumpurple: "#9370DB",
    rebeccapurple: "#663399",
    blueviolet: "#8A2BE2",
    darkviolet: "#9400D3",
    darkorchid: "#9932CC",
    darkmagenta: "#8B008B",
    purple: "#800080",
    indigo: "#4B0082",
    slateblue: "#6A5ACD",
    darkslateblue: "#483D8B",
    mediumslateblue: "#7B68EE",
    //GREEN
    greenyellow: "#ADFF2F",
    chartreuse: "#7FFF00",
    lawngreen: "#7CFC00",
    lime: "#00FF00",
    limegreen: "#32CD32",
    palegreen: "#98FB98",
    lightgreen: "#90EE90",
    mediumspringgreen: "#00FA9A",
    springgreen: "#00FF7F",
    mediumseagreen: "#3CB371",
    seagreen: "#2E8B57",
    forestgreen: "#228B22",
    green: "#008000",
    darkgreen: "#006400",
    yellowgreen: "#9ACD32",
    olivedrab: "#6B8E23",
    olive: "#808000",
    darkolivegreen: "#556B2F",
    mediumaquamarine: "#66CDAA",
    darkseagreen: "#8FBC8B",
    lightseagreen: "#20B2AA",
    darkcyan: "#008B8B",
    teal: "#008080",
    //BLUE
    aqua: "#00FFFF",
    cyan: "#00FFFF",
    lightcyan: "#E0FFFF",
    paleturquoise: "#AFEEEE",
    aquamarine: "#7FFFD4",
    turquoise: "#40E0D0",
    mediumturquoise: "#48D1CC",
    darkturquoise: "#00CED1",
    cadetblue: "#5F9EA0",
    steelblue: "#4682B4",
    lightsteelblue: "#B0C4DE",
    powderblue: "#B0E0E6",
    lightblue: "#ADD8E6",
    skyblue: "#87CEEB",
    lightskyblue: "#87CEFA",
    deepskyblue: "#00BFFF",
    dodgerblue: "#1E90FF",
    cornflowerblue: "#6495ED",
    //"mediumslateblue: "#7B68EE",
    royalblue: "#4169E1",
    blue: "#0000FF",
    mediumblue: "#0000CD",
    darkblue: "#00008B",
    navy: "#000080",
    midnightblue: "#191970",
    //BROWN
    cornsilk: "#FFF8DC",
    blanchedalmond: "#FFEBCD",
    bisque: "#FFE4C4",
    navajowhite: "#FFDEAD",
    wheat: "#F5DEB3",
    burlywood: "#DEB887",
    tan: "#D2B48C",
    rosybrown: "#BC8F8F",
    sandybrown: "#F4A460",
    goldenrod: "#DAA520",
    darkgoldenrod: "#B8860B",
    peru: "#CD853F",
    chocolate: "#D2691E",
    saddlebrown: "#8B4513",
    sienna: "#A0522D",
    brown: "#A52A2A",
    maroon: "#800000",
    //WHITE
    white: "#FFFFFF",
    snow: "#FFFAFA",
    honeydew: "#F0FFF0",
    mintcream: "#F5FFFA",
    azure: "#F0FFFF",
    aliceblue: "#F0F8FF",
    ghostwhite: "#F8F8FF",
    whitesmoke: "#F5F5F5",
    seashell: "#FFF5EE",
    beige: "#F5F5DC",
    oldlace: "#FDF5E6",
    floralwhite: "#FFFAF0",
    ivory: "#FFFFF0",
    antiquewhite: "#FAEBD7",
    linen: "#FAF0E6",
    lavenderblush: "#FFF0F5",
    mistyrose: "#FFE4E1",
    //GREY
    gainsboro: "#DCDCDC",
    lightgray: "#D3D3D3",
    silver: "#C0C0C0",
    darkgray: "#A9A9A9",
    gray: "#808080",
    dimgray: "#696969",
    lightslategray: "#778899",
    slategray: "#708090",
    darkslategray: "#2F4F4F",
    black: "#000000"
};

/**
 * Make the color into a darker color
 * @param colorInput
 * @returns the darked color in
 */
var darkerColor = function (colorInput, percentage) {
    if (percentage === void 0) { percentage = 25; }
    var darkedColor = "";
    var reduce = (100 - percentage) / 100;
    var component1 = 0;
    var component2 = 0;
    var component3 = 0;
    if (isHexColor(colourNameToHex(colorInput))) {
        component1 = hexTodec(colorInput.charAt(1)) * 16 + hexTodec(colorInput.charAt(2));
        component2 = hexTodec(colorInput.charAt(3)) * 16 + hexTodec(colorInput.charAt(4));
        component3 = hexTodec(colorInput.charAt(5)) * 16 + hexTodec(colorInput.charAt(6));
        darkedColor = "rgb(".concat(component1 * reduce, ", ").concat(component2 * reduce, ",").concat(component3 * reduce, ")");
    }
    else {
        if (colorInput.includes("rgba")) {
            var slicer = colorInput.replace("rgba(", "");
            var components = slicer.split(",");
            darkedColor = "rgb(".concat(parseInt(components[0], 10) * reduce, ", ").concat(parseInt(components[1], 10) * reduce, ",").concat(parseInt(components[2], 10) * reduce, ")");
            //return darkedColor;
        }
        else if (colorInput.includes("rgb")) {
            var slicer = colorInput.replace("rgb(", "");
            var components = slicer.split(",");
            darkedColor = "rgb(".concat(parseInt(components[0], 10) * reduce, ", ").concat(parseInt(components[1], 10) * reduce, ",").concat(parseInt(components[2], 10) * reduce, ")");
            // return darkedColor;
        }
    }
    return darkedColor;
};
/**
 * Make the color into a brighted color
 * @param colorInput
 * @returns the brighted color
 */
var brighterColor = function (colorInput, percentage) {
    if (percentage === void 0) { percentage = 25; }
    var brightedColor = "";
    var increase = (100 + percentage) / 100;
    var component1 = 0;
    var component2 = 0;
    var component3 = 0;
    if (isHexColor(colourNameToHex(colorInput))) {
        component1 = hexTodec(colorInput.charAt(1)) * 16 + hexTodec(colorInput.charAt(2));
        component2 = hexTodec(colorInput.charAt(3)) * 16 + hexTodec(colorInput.charAt(4));
        component3 = hexTodec(colorInput.charAt(5)) * 16 + hexTodec(colorInput.charAt(6));
        brightedColor = "rgb(".concat(component1 * increase, ", ").concat(component2 * increase, ",").concat(component3 * increase, ")");
    }
    else {
        if (colorInput.includes("rgba")) {
            var slicer = colorInput.replace("rgba(", "");
            var components = slicer.split(",");
            brightedColor = "rgb(".concat(parseInt(components[0], 10) * increase, ", ").concat(parseInt(components[1], 10) * increase, ",").concat(parseInt(components[2], 10) * increase, ")");
            //return darkedColor;
        }
        else if (colorInput.includes("rgb")) {
            var slicer = colorInput.replace("rgb(", "");
            var components = slicer.split(",");
            brightedColor = "rgb(".concat(parseInt(components[0], 10) * increase, ", ").concat(parseInt(components[1], 10) * increase, ",").concat(parseInt(components[2], 10) * increase, ")");
            // return darkedColor;
        }
    }
    return brightedColor;
};
/**
 * In order to managae rgba() we convert hex colors into rgba()
 * If the given color is already a rgb() color, it can add the percentage to convert it into rgba()
 *
 *
 * @param colorInput color in hex or in rgb
 * @param perc percentage for RGBA() color
 * @returns the rgba representation of a hex color
 */
var hexColorToRGB = function (colorInput, perc, defaultColor) {
    if (perc === void 0) { perc = 0; }
    var resultDefault = defaultColor ? defaultColor : "rgba(255, 255, 255, 0.6)";
    if (!colorInput) {
        return resultDefault;
    }
    //work only in uppercase
    var color = colorInput.toUpperCase();
    // is already a rgba color
    if (color.includes("RGBA")) {
        return color;
    }
    //return rbg => rgba
    if (color.includes("RGB")) {
        return color.replace('RGB', "rgba").replace(')', ", ".concat(perc, ")"));
    }
    // if is a hex color or named color
    if (!isHexColor(colourNameToHex(color))) {
        return resultDefault;
    }
    var resultOk = "";
    //let strVar: string = "";
    var component1 = 0;
    var component2 = 0;
    var component3 = 0;
    //If passed all validations, proceed to transform
    component1 = hexTodec(color.charAt(1)) * 16 + hexTodec(color.charAt(2));
    component2 = hexTodec(color.charAt(3)) * 16 + hexTodec(color.charAt(4));
    component3 = hexTodec(color.charAt(5)) * 16 + hexTodec(color.charAt(6));
    resultOk = "rgba(".concat(component1, ", ").concat(component2, ",").concat(component3, " , ").concat(perc, ")");
    return resultOk;
};
/**
 * Validates wheteher the color is hexadecimal css color
 * Example:  #FF56AC
 *
 *
 * @param colorInput the color inpt to test
 * @returns true if the inputColor is a hexadecimal css color
 */
var isHexColor = function (colorInput) {
    // if first element is no '#' return default background color
    if (colorInput.charAt(0) !== '#') {
        return false;
    }
    // if color lenght is not exactly 7 return default
    if (colorInput.length !== 7) {
        return false;
    }
    // if one of the letters is not included in hex array return  default
    for (var i = 1; i < colorInput.length; i++) {
        if (!hexArray.includes(colorInput.charAt(i))) {
            return false;
        }
    }
    return true;
};
/**
 * Converts a named color into hexadecimal color
 * from a list of well known namd colors if found.
 * When not given returns a ""
 * When not found in the list, returns the same value given
 * @param colour the named color
 * @returns The hex representation of the color or "" or the same color
 */
function colourNameToHex(colour) {
    /**
     * When not given
     */
    if (!colour) {
        return "";
    }
    /**
     * when named color is found
     */
    if (NAMED_COLORS[colour.toLocaleLowerCase()] !== undefined) {
        return NAMED_COLORS[colour.toLocaleLowerCase()];
    }
    /**
     * When the named color was not found
     */
    return colour;
}
/**
 * hexArray & decArray
 *
 * arrays of numbers used to convert hexadecimal numbers into decimal and viceversa
 */
var hexArray = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];
var decArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
/**
 * Converts hex number in string representation to decimal number
 *
 *
 * @param letter the string hex number
 * @returns a decimal number
 */
var hexTodec = function (letter) {
    if (hexArray.includes(letter)) {
        return decArray[hexArray.indexOf(letter)];
    }
    else {
        return 0;
    }
};
/**
 * Asure a base color. When not given or when given an incorrect color format
 * default color is this kind of grey #5d6475
 *
 * @param color param color given by user
 * @returns returns the same color
 */
var asureColor = function (color) {
    if (color !== undefined && color !== "") {
        return color;
    }
    else {
        return DEFAULT_FONT_COLOR;
    }
};
/**
 * Asure a base color. When not given or when given an incorrect color format
 * default color is this kind of grey #5d6475
 *
 * @param color param color given by user
 * @returns returns the same color
 */
var completeAsureColor = function (color, perc) {
    if (perc === void 0) { perc = 1; }
    return hexColorToRGB(asureColor(colourNameToHex(color)), perc);
};
var DEFAULT_FONT_COLOR = "#646c7f";

var extFileReconcilation = function (dropzoneId, extFileIncomming) {
    var result = [];
    var arrOfExtFiles = ExtFileManager.getExtFileInstanceList(dropzoneId);
    // continue only if arrOfExtFiles exists
    if (arrOfExtFiles) {
        //different sizes means there was deleted files
        //also can be new files to be uploaded
        //needed an extra flag to allow add files in the middle of uploading process
        // if new files are added, they are added to the Manager
        // outside they were already added to the UI
        // inside Dropzone, will be needed a .next() method for manager
        // 1st allow deleted files and ignore new ones
        // reduce the arrOfExtFileInstances array
        // parecido a listas ligadas, iterar hasta encontrar null XD
        var incommingTemp = __spreadArray([], extFileIncomming, true);
        incommingTemp = incommingTemp.filter(function (F) { return (arrOfExtFiles === null || arrOfExtFiles === void 0 ? void 0 : arrOfExtFiles.findIndex(function (I) { return I.id === F.id; })) === -1; });
        //console.log("reconciliation incommingTemp", incommingTemp);
        //different sizes not allowed
        if (arrOfExtFiles.length !== extFileIncomming.length || extFileIncomming.length === 0) {
            return undefined;
        }
        for (var i = 0; i < arrOfExtFiles.length; i++) {
            if ((extFileIncomming[i].uploadStatus === undefined)
                &&
                    (arrOfExtFiles[i].uploadStatus === "preparing")) {
                //console.log("useDropzoneFileListUpdater onCancel i", i);
                arrOfExtFiles[i].uploadStatus = undefined;
            }
        }
    }
    return result;
};

exports.ABORTED_ERROR_RESPONSE = ABORTED_ERROR_RESPONSE;
exports.DropzoneEnglish = DropzoneEnglish;
exports.DropzoneFrench = DropzoneFrench;
exports.DropzoneItalian = DropzoneItalian;
exports.DropzoneLocalizer = DropzoneLocalizer;
exports.DropzoneLocalizerSelector = DropzoneLocalizerSelector;
exports.DropzonePortuguese = DropzonePortuguese;
exports.DropzoneRussian = DropzoneRussian;
exports.DropzoneSimplifiedChinese = DropzoneSimplifiedChinese;
exports.DropzoneSpanish = DropzoneSpanish;
exports.DropzoneTraditionalChinese = DropzoneTraditionalChinese;
exports.ExtFileInstance = ExtFileInstance;
exports.ExtFileManager = ExtFileManager;
exports.FileIdGenerator = FileIdGenerator;
exports.FileItemEnglish = FileItemEnglish;
exports.FileItemFrench = FileItemFrench;
exports.FileItemItalian = FileItemItalian;
exports.FileItemLocalizer = FileItemLocalizer;
exports.FileItemLocalizerSelector = FileItemLocalizerSelector;
exports.FileItemPortuguese = FileItemPortuguese;
exports.FileItemRussian = FileItemRussian;
exports.FileItemSimplifiedChinese = FileItemSimplifiedChinese;
exports.FileItemSpanish = FileItemSpanish;
exports.FileItemTraditionalChinese = FileItemTraditionalChinese;
exports.FuiUpload = FuiUpload;
exports.JSON_PARSE_ERROR_RESPONSE = JSON_PARSE_ERROR_RESPONSE;
exports.JsonParseResponse = JsonParseResponse;
exports.NAMED_COLORS = NAMED_COLORS;
exports.NO_XHR_PROVIDED_ERROR = NO_XHR_PROVIDED_ERROR;
exports.SyntheticFile = SyntheticFile;
exports.TIMEOUT_ERROR_RESPONSE = TIMEOUT_ERROR_RESPONSE;
exports.UNEXPECTED_ERROR_RESPONSE = UNEXPECTED_ERROR_RESPONSE;
exports.ValidateErrorEnglish = ValidateErrorEnglish;
exports.ValidateErrorFrench = ValidateErrorFrench;
exports.ValidateErrorItalian = ValidateErrorItalian;
exports.ValidateErrorLocalizer = ValidateErrorLocalizer;
exports.ValidateErrorLocalizerSelector = ValidateErrorLocalizerSelector;
exports.ValidateErrorPortuguese = ValidateErrorPortuguese;
exports.ValidateErrorRussian = ValidateErrorRussian;
exports.ValidateErrorSimplifiedChinese = ValidateErrorSimplifiedChinese;
exports.ValidateErrorSpanish = ValidateErrorSpanish;
exports.ValidateErrorTraditionalChinese = ValidateErrorTraditionalChinese;
exports.aac = aac;
exports.abw = abw;
exports.accdb = accdb;
exports.addClassName = addClassName;
exports.addExtraData = addExtraData;
exports.addHeaders = addHeaders;
exports.applicationSelector = applicationSelector;
exports.asureColor = asureColor;
exports.audioSelector = audioSelector;
exports.avi = avi;
exports.azw = azw;
exports.bmp = bmp;
exports.brighterColor = brighterColor;
exports.bz = bz;
exports.bz2 = bz2;
exports.cda = cda;
exports.checkIsCode = checkIsCode;
exports.cleanInput = cleanInput;
exports.colourNameToHex = colourNameToHex;
exports.completeAsureColor = completeAsureColor;
exports.completeUploadResult = completeUploadResult;
exports.createListOfMultiTypeFile = createListOfMultiTypeFile;
exports.createSyntheticFile = createSyntheticFile;
exports.createUploadConfig = createUploadConfig;
exports.csh = csh;
exports.css = css;
exports.csv = csv;
exports.darkerColor = darkerColor;
exports.docx = docx;
exports.drawio = drawio;
exports.eot = eot;
exports.epub = epub;
exports.extFileMock = extFileMock;
exports.extFileReconcilation = extFileReconcilation;
exports.extensionSelector = extensionSelector;
exports.fakeFuiUpload = fakeFuiUpload;
exports.fileListToExtFileArray = fileListToExtFileArray;
exports.fileListToExtFileInstanceArray = fileListToExtFileInstanceArray;
exports.fileListvalidator = fileListvalidator;
exports.fileSizeFormater = fileSizeFormater;
exports.fontSelector = fontSelector;
exports.freearc = freearc;
exports.getExt = getExt;
exports.getImageOrientation = getImageOrientation;
exports.getLocalFileItemData = getLocalFileItemData;
exports.getRandomInt = getRandomInt;
exports.getURLFileIco = getURLFileIco;
exports.getURLFileIcoFromNameAndType = getURLFileIcoFromNameAndType;
exports.gif = gif;
exports.gzip = gzip;
exports.hexColorToRGB = hexColorToRGB;
exports.hexTodec = hexTodec;
exports.html = html;
exports.icalendar = icalendar;
exports.imageSelector = imageSelector;
exports.instantPreparingToUploadOne = instantPreparingToUploadOne;
exports.isHexColor = isHexColor;
exports.isUploadAbleExtFile = isUploadAbleExtFile;
exports.isValidateActive = isValidateActive;
exports.jar = jar;
exports.java = java;
exports.javascript = javascript;
exports.jpeg = jpeg;
exports.json = json;
exports.jsonld = jsonld;
exports.makeErrorUploadResponse = makeErrorUploadResponse;
exports.makeServerResponse = makeServerResponse;
exports.makeSuccessUploadResponse = makeSuccessUploadResponse;
exports.makeSyntheticExtFile = makeSyntheticExtFile;
exports.midi = midi;
exports.mimeSelector = mimeSelector;
exports.mp3 = mp3;
exports.mp4 = mp4;
exports.mpeg = mpeg;
exports.mpkg = mpkg;
exports.octet = octet;
exports.odp = odp;
exports.ods = ods;
exports.odt = odt;
exports.oga = oga;
exports.ogv = ogv;
exports.ogx = ogx;
exports.opus = opus;
exports.otf = otf;
exports.pdf = pdf;
exports.php = php;
exports.png = png;
exports.pptx = pptx;
exports.prepToUploadOne = prepToUploadOne;
exports.preparingToUploadOne = preparingToUploadOne;
exports.psd = psd;
exports.python = python;
exports.rar = rar;
exports.react = react;
exports.readAsArrayBuffer = readAsArrayBuffer;
exports.readAsBinaryString = readAsBinaryString;
exports.readAsDataURL = readAsDataURL;
exports.readAsText = readAsText;
exports.resizeImage = resizeImage;
exports.rtf = rtf;
exports.sanitizeArrExtFile = sanitizeArrExtFile;
exports.sass = sass;
exports.separateAccept = separateAccept;
exports.setNextUploadStatus = setNextUploadStatus;
exports.setPrepToUploading = setPrepToUploading;
exports.sevenzip = sevenzip;
exports.sh = sh;
exports.shrinkWord = shrinkWord;
exports.sleepPreparing = sleepPreparing;
exports.sleepTransition = sleepTransition;
exports.swf = swf;
exports.tar = tar;
exports.text = text;
exports.textSelector = textSelector;
exports.tiff = tiff;
exports.toUploadableExtFileList = toUploadableExtFileList;
exports.ttf = ttf;
exports.typescript = typescript;
exports.unableToUploadResult = unableToUploadResult;
exports.unexpectedErrorUploadResult = unexpectedErrorUploadResult;
exports.uploadExtFile = uploadExtFile;
exports.uploadFile = uploadFile;
exports.uploadFormData = uploadFormData;
exports.uploadOne = uploadOne;
exports.uploadOneExtFile = uploadOneExtFile;
exports.validateAccept = validateAccept;
exports.validateExtFile = validateExtFile;
exports.validateExtFileList = validateExtFileList;
exports.validateFile = validateFile;
exports.videoSelector = videoSelector;
exports.vsd = vsd;
exports.vue = vue;
exports.wav = wav;
exports.weba = weba;
exports.webm = webm;
exports.webp = webp;
exports.wma = wma;
exports.wmv = wmv;
exports.woff = woff;
exports.xlsx = xlsx;
exports.xml = xml;
exports.xul = xul;
exports.zip = zip;
//# sourceMappingURL=index.js.map
