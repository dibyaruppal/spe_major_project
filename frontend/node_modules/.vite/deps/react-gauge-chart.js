import {
  require_baseIsEqual
} from "./chunk-HJYRLECV.js";
import {
  init_src,
  src_exports
} from "./chunk-XFPLI2PE.js";
import {
  require_prop_types
} from "./chunk-I2EHB27Z.js";
import {
  __commonJS,
  __toCommonJS,
  require_react
} from "./chunk-BW7D66CD.js";

// node_modules/react-gauge-chart/dist/GaugeChart/utils.js
var require_utils = __commonJS({
  "node_modules/react-gauge-chart/dist/GaugeChart/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.setArcData = exports.addText = exports.calculateRotation = exports.updateDimensions = exports.centerGraph = exports.calculateRadius = void 0;
    var _d = (init_src(), __toCommonJS(src_exports));
    var calculateRadius = function calculateRadius2(width, height, outerRadius, margin, g) {
      if (width.current < 2 * height.current) {
        outerRadius.current = (width.current - margin.current.left - margin.current.right) / 2;
      } else {
        outerRadius.current = height.current - margin.current.top - margin.current.bottom;
      }
      centerGraph(width, g, outerRadius, margin);
    };
    exports.calculateRadius = calculateRadius;
    var centerGraph = function centerGraph2(width, g, outerRadius, margin) {
      margin.current.left = width.current / 2 - outerRadius.current + margin.current.right;
      g.current.attr("transform", "translate(" + margin.current.left + ", " + margin.current.top + ")");
    };
    exports.centerGraph = centerGraph;
    var updateDimensions = function updateDimensions2(props, container, margin, width, height) {
      var marginInPercent = props.marginInPercent;
      var divDimensions = container.current.node().getBoundingClientRect(), divWidth = divDimensions.width, divHeight = divDimensions.height;
      margin.current.left = divWidth * marginInPercent;
      margin.current.right = divWidth * marginInPercent;
      width.current = divWidth - margin.current.left - margin.current.right;
      margin.current.top = divHeight * marginInPercent;
      margin.current.bottom = divHeight * marginInPercent;
      height.current = width.current / 2 - margin.current.top - margin.current.bottom;
    };
    exports.updateDimensions = updateDimensions;
    var calculateRotation = function calculateRotation2(percent, outerRadius, width, needleScale) {
      var needleLength = outerRadius.current * needleScale, needleRadius = 15 * (width.current / 500), theta = percentToRad(percent), centerPoint = [0, -needleRadius / 2], topPoint = [centerPoint[0] - needleLength * Math.cos(theta), centerPoint[1] - needleLength * Math.sin(theta)], leftPoint = [centerPoint[0] - needleRadius * Math.cos(theta - Math.PI / 2), centerPoint[1] - needleRadius * Math.sin(theta - Math.PI / 2)], rightPoint = [centerPoint[0] - needleRadius * Math.cos(theta + Math.PI / 2), centerPoint[1] - needleRadius * Math.sin(theta + Math.PI / 2)];
      var pathStr = "M ".concat(leftPoint[0], " ").concat(leftPoint[1], " L ").concat(topPoint[0], " ").concat(topPoint[1], " L ").concat(rightPoint[0], " ").concat(rightPoint[1]);
      return pathStr;
    };
    exports.calculateRotation = calculateRotation;
    var addText = function addText2(percentage, props, outerRadius, width, g) {
      var formatTextValue = props.formatTextValue, fontSize = props.fontSize;
      var textPadding = 20;
      var text = formatTextValue ? formatTextValue(floatingNumber(percentage)) : floatingNumber(percentage) + "%";
      g.current.append("g").attr("class", "text-group").attr("transform", "translate(".concat(outerRadius.current, ", ").concat(outerRadius.current / 2 + textPadding, ")")).append("text").text(text).style("font-size", function() {
        return fontSize ? fontSize : "".concat(width.current / 11 / (text.length > 10 ? text.length / 10 : 1), "px");
      }).style("fill", props.textColor).style("text-anchor", "middle");
    };
    exports.addText = addText;
    var setArcData = function setArcData2(props, nbArcsToDisplay, colorArray, arcData) {
      nbArcsToDisplay.current = props.arcsLength ? props.arcsLength.length : props.nrOfLevels;
      if (nbArcsToDisplay.current === props.colors.length) {
        colorArray.current = props.colors;
      } else {
        colorArray.current = getColors(props, nbArcsToDisplay);
      }
      arcData.current = [];
      for (var i = 0; i < nbArcsToDisplay.current; i++) {
        var arcDatum = {
          value: props.arcsLength && props.arcsLength.length > i ? props.arcsLength[i] : 1,
          color: colorArray.current[i]
        };
        arcData.current.push(arcDatum);
      }
    };
    exports.setArcData = setArcData;
    var getColors = function getColors2(props, nbArcsToDisplay) {
      var colors = props.colors;
      var colorScale = (0, _d.scaleLinear)().domain([1, nbArcsToDisplay.current]).range([colors[0], colors[colors.length - 1]]).interpolate(_d.interpolateHsl);
      var colorArray = [];
      for (var i = 1; i <= nbArcsToDisplay.current; i++) {
        colorArray.push(colorScale(i));
      }
      return colorArray;
    };
    var floatingNumber = function floatingNumber2(value) {
      var maxDigits = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
      return Math.round(value * 100 * Math.pow(10, maxDigits)) / Math.pow(10, maxDigits);
    };
    var percentToRad = function percentToRad2(percent) {
      return percent * Math.PI;
    };
  }
});

// node_modules/react-gauge-chart/dist/GaugeChart/renderChart.js
var require_renderChart = __commonJS({
  "node_modules/react-gauge-chart/dist/GaugeChart/renderChart.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.renderChart = void 0;
    var _utils = require_utils();
    var renderChart = function renderChart2(resize, prevProps, width, margin, height, outerRadius, g, doughnut, arcChart, needle, pieChart, svg, props, container, arcData) {
      (0, _utils.updateDimensions)(props, container, margin, width, height);
      svg.current.attr("width", width.current + margin.current.left + margin.current.right).attr("height", height.current + margin.current.top + margin.current.bottom);
      g.current.attr("transform", "translate(" + margin.current.left + ", " + margin.current.top + ")");
      (0, _utils.calculateRadius)(width, height, outerRadius, margin, g);
      doughnut.current.attr("transform", "translate(" + outerRadius.current + ", " + outerRadius.current + ")");
      arcChart.current.outerRadius(outerRadius.current).innerRadius(outerRadius.current * (1 - props.arcWidth)).cornerRadius(props.cornerRadius).padAngle(props.arcPadding);
      doughnut.current.selectAll(".arc").remove();
      g.current.selectAll(".text-group").remove();
      var arcPaths = doughnut.current.selectAll(".arc").data(pieChart.current(arcData.current)).enter().append("g").attr("class", "arc");
      arcPaths.append("path").attr("d", arcChart.current).style("fill", function(d) {
        return d.data.color;
      });
    };
    exports.renderChart = renderChart;
  }
});

// node_modules/react-gauge-chart/dist/GaugeChart/drawNeedle.js
var require_drawNeedle = __commonJS({
  "node_modules/react-gauge-chart/dist/GaugeChart/drawNeedle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.drawNeedle = void 0;
    var _d = (init_src(), __toCommonJS(src_exports));
    var _utils = require_utils();
    var drawNeedle = function drawNeedle2(resize, prevProps, props, width, needle, container, outerRadius, g) {
      var percent = props.percent, needleColor = props.needleColor, needleBaseColor = props.needleBaseColor, hideText = props.hideText, animate = props.animate, needleScale = props.needleScale, textComponent = props.textComponent;
      var needleRadius = 15 * (width.current / 500), centerPoint = [0, -needleRadius / 2];
      needle.current.selectAll("*").remove();
      needle.current.attr("transform", "translate(" + outerRadius.current + ", " + outerRadius.current + ")");
      var prevPercent = prevProps ? prevProps.percent : 0;
      var pathStr = (0, _utils.calculateRotation)(prevPercent || percent, outerRadius, width, needleScale);
      needle.current.append("path").attr("d", pathStr).attr("fill", needleColor);
      needle.current.append("circle").attr("cx", centerPoint[0]).attr("cy", centerPoint[1]).attr("r", needleRadius).attr("fill", needleBaseColor);
      if (!hideText && !textComponent) {
        (0, _utils.addText)(percent, props, outerRadius, width, g);
      }
      if (!resize && animate) {
        needle.current.transition().delay(props.animDelay).ease(_d.easeElastic).duration(props.animateDuration).tween("progress", function() {
          var currentPercent = (0, _d.interpolateNumber)(prevPercent, percent);
          return function(percentOfPercent) {
            var progress = currentPercent(percentOfPercent);
            return container.current.select(".needle path").attr("d", (0, _utils.calculateRotation)(progress, outerRadius, width, needleScale));
          };
        });
      } else {
        container.current.select(".needle path").attr("d", (0, _utils.calculateRotation)(percent, outerRadius, width, needleScale));
      }
    };
    exports.drawNeedle = drawNeedle;
  }
});

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/lodash/isEqual.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }
    module.exports = isEqual;
  }
});

// node_modules/react-gauge-chart/dist/GaugeChart/customHooks.js
var require_customHooks = __commonJS({
  "node_modules/react-gauge-chart/dist/GaugeChart/customHooks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _isEqual = _interopRequireDefault(require_isEqual());
    var _react = require_react();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var isDeepEquals = function isDeepEquals2(toCompare, reference) {
      return (0, _isEqual.default)(toCompare, reference);
    };
    var useDeepCompareMemo = function useDeepCompareMemo2(dependencies) {
      var ref = (0, _react.useRef)(null);
      if (isDeepEquals(dependencies, ref.current)) {
        ref.current = dependencies;
      }
      return ref.current;
    };
    var useDeepCompareEffect = function useDeepCompareEffect2(callback, dependencies) {
      (0, _react.useEffect)(callback, [useDeepCompareMemo(dependencies), callback]);
    };
    var _default = useDeepCompareEffect;
    exports.default = _default;
  }
});

// node_modules/react-gauge-chart/dist/GaugeChart/index.js
var require_GaugeChart = __commonJS({
  "node_modules/react-gauge-chart/dist/GaugeChart/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _d = (init_src(), __toCommonJS(src_exports));
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _utils = require_utils();
    var _renderChart = require_renderChart();
    var _drawNeedle = require_drawNeedle();
    var _customHooks = _interopRequireDefault(require_customHooks());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _getRequireWildcardCache() {
      if (typeof WeakMap !== "function")
        return null;
      var cache = /* @__PURE__ */ new WeakMap();
      _getRequireWildcardCache = function _getRequireWildcardCache2() {
        return cache;
      };
      return cache;
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return { default: obj };
      }
      var cache = _getRequireWildcardCache();
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj.default = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var startAngle = -Math.PI / 2;
    var endAngle = Math.PI / 2;
    var defaultStyle = {
      width: "100%"
    };
    var animateNeedleProps = ["marginInPercent", "arcPadding", "percent", "nrOfLevels", "animDelay"];
    var defaultProps = {
      style: defaultStyle,
      marginInPercent: 0.05,
      cornerRadius: 6,
      nrOfLevels: 3,
      percent: 0.4,
      arcPadding: 0.05,
      //The padding between arcs, in rad
      arcWidth: 0.2,
      //The width of the arc given in percent of the radius
      colors: ["#00FF00", "#FF0000"],
      //Default defined colors
      textColor: "#fff",
      needleColor: "#464A4F",
      needleBaseColor: "#464A4F",
      hideText: false,
      animate: true,
      animDelay: 500,
      formatTextValue: null,
      fontSize: null,
      animateDuration: 3e3,
      textComponent: void 0,
      needleScale: 0.55,
      customNeedleComponent: null
    };
    var GaugeChart = function GaugeChart2(initialProps) {
      var props = (0, _react.useMemo)(function() {
        return _objectSpread(_objectSpread({}, defaultProps), initialProps);
      }, [initialProps]);
      var svg = (0, _react.useRef)({});
      var g = (0, _react.useRef)({});
      var width = (0, _react.useRef)({});
      var height = (0, _react.useRef)({});
      var doughnut = (0, _react.useRef)({});
      var needle = (0, _react.useRef)({});
      var outerRadius = (0, _react.useRef)({});
      var margin = (0, _react.useRef)({});
      var container = (0, _react.useRef)({});
      var nbArcsToDisplay = (0, _react.useRef)(0);
      var colorArray = (0, _react.useRef)([]);
      var arcChart = (0, _react.useRef)((0, _d.arc)());
      var arcData = (0, _react.useRef)([]);
      var pieChart = (0, _react.useRef)((0, _d.pie)());
      var prevProps = (0, _react.useRef)(props);
      var selectedRef = (0, _react.useRef)({});
      var initChart = (0, _react.useCallback)(function(update) {
        var resize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        var prevProps2 = arguments.length > 2 ? arguments[2] : void 0;
        if (update) {
          (0, _renderChart.renderChart)(resize, prevProps2, width, margin, height, outerRadius, g, doughnut, arcChart, needle, pieChart, svg, props, container, arcData);
          !customNeedleComponent && (0, _drawNeedle.drawNeedle)(resize, prevProps2, props, width, needle, container, outerRadius, g);
          return;
        }
        container.current.select("svg").remove();
        svg.current = container.current.append("svg");
        g.current = svg.current.append("g");
        doughnut.current = g.current.append("g").attr("class", "doughnut");
        pieChart.current.value(function(d) {
          return d.value;
        }).startAngle(startAngle).endAngle(endAngle).sort(null);
        needle.current = g.current.append("g").attr("class", "needle");
        (0, _renderChart.renderChart)(resize, prevProps2, width, margin, height, outerRadius, g, doughnut, arcChart, needle, pieChart, svg, props, container, arcData);
        !customNeedleComponent && (0, _drawNeedle.drawNeedle)(resize, prevProps2, props, width, needle, container, outerRadius, g);
      }, [props]);
      (0, _react.useLayoutEffect)(function() {
        (0, _utils.setArcData)(props, nbArcsToDisplay, colorArray, arcData);
        container.current = (0, _d.select)(selectedRef);
        initChart();
      }, [props, initChart]);
      (0, _customHooks.default)(function() {
        if (props.nrOfLevels || prevProps.current.arcsLength.every(function(a) {
          return props.arcsLength.includes(a);
        }) || prevProps.current.colors.every(function(a) {
          return props.colors.includes(a);
        })) {
          (0, _utils.setArcData)(props, nbArcsToDisplay, colorArray, arcData);
        }
        var resize = !animateNeedleProps.some(function(key) {
          return prevProps.current[key] !== props[key];
        });
        initChart(true, resize, prevProps.current);
        prevProps.current = props;
      }, [props.nrOfLevels, props.arcsLength, props.colors, props.percent, props.needleColor, props.needleBaseColor]);
      (0, _react.useEffect)(function() {
        var handleResize = function handleResize2() {
          var resize = true;
          (0, _renderChart.renderChart)(resize, prevProps, width, margin, height, outerRadius, g, doughnut, arcChart, needle, pieChart, svg, props, container, arcData);
          !customNeedleComponent && (0, _drawNeedle.drawNeedle)(resize, prevProps, props, width, needle, container, outerRadius, g);
        };
        window.addEventListener("resize", handleResize);
        return function() {
          window.removeEventListener("resize", handleResize);
        };
      }, [props]);
      var id = props.id, style = props.style, className = props.className, textComponent = props.textComponent, textComponentContainerClassName = props.textComponentContainerClassName, customNeedleComponent = props.customNeedleComponent, customNeedleStyle = props.customNeedleStyle, customNeedleComponentClassName = props.customNeedleComponentClassName;
      return _react.default.createElement("div", {
        id,
        className,
        style
      }, _react.default.createElement("div", {
        ref: function ref(svg2) {
          return selectedRef = svg2;
        }
      }, _react.default.createElement("div", {
        className: textComponentContainerClassName,
        style: {
          position: "relative",
          top: "50%"
        }
      }, textComponent)), customNeedleComponent && _react.default.createElement("div", {
        className: customNeedleComponentClassName,
        style: _objectSpread({
          position: "relative"
        }, customNeedleStyle)
      }, customNeedleComponent));
    };
    var _default = GaugeChart;
    exports.default = _default;
    GaugeChart.propTypes = {
      id: _propTypes.default.string,
      className: _propTypes.default.string,
      style: _propTypes.default.object,
      marginInPercent: _propTypes.default.number,
      cornerRadius: _propTypes.default.number,
      nrOfLevels: _propTypes.default.number,
      percent: _propTypes.default.number,
      arcPadding: _propTypes.default.number,
      arcWidth: _propTypes.default.number,
      arcsLength: _propTypes.default.array,
      colors: _propTypes.default.array,
      textColor: _propTypes.default.string,
      needleColor: _propTypes.default.string,
      needleBaseColor: _propTypes.default.string,
      hideText: _propTypes.default.bool,
      animate: _propTypes.default.bool,
      formatTextValue: _propTypes.default.func,
      fontSize: _propTypes.default.string,
      animateDuration: _propTypes.default.number,
      animDelay: _propTypes.default.number,
      textComponent: _propTypes.default.element,
      textComponentContainerClassName: _propTypes.default.string,
      needleScale: _propTypes.default.number,
      customNeedleComponent: _propTypes.default.element,
      customNeedleComponentClassName: _propTypes.default.string,
      customNeedleStyle: _propTypes.default.object
    };
  }
});

// node_modules/react-gauge-chart/dist/index.js
var require_dist = __commonJS({
  "node_modules/react-gauge-chart/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _GaugeChart = _interopRequireDefault(require_GaugeChart());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = _GaugeChart.default;
    exports.default = _default;
  }
});
export default require_dist();
//# sourceMappingURL=react-gauge-chart.js.map
